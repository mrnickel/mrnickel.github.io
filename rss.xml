<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd">
  <channel>
    <title>RyanNickel.com</title>
    <link>http://RyanNickel.com/</link>
    <description>Ryan Nickel's thought poops</description>
    
		<item>
			<title>My Thoughts on WWDC 2019</title>
			<link>http://RyanNickel.com/html/my_thoughts_on_wwdc_2019.html</link>
			<description>
				<![CDATA[
					<p>WWDC is an event I&rsquo;ve been watching every year since I think 2007, the year they announced the iPhone. At the time I was a big Apple fanboy.</p>

<p>I bought my first iBook which I believe was the 2002 model. I can&rsquo;t be sure. I was in University and it cost me more money than I had, but I had
never been so satisfied with a computer in my life. As Marie Kondo would say, it sparked joy. Our computer lab had macs, but they were running
Mac OS 9. The OS made no sense to me. I came from a Windows world, and although I was very comfortable with that, OS 9 to me always felt clunky
and unintuitive.</p>

<p>Never would I buy a Mac, I told myself&hellip; even though the hardware was fun and always boasted more up-to-date technology, I just couldn&rsquo;t get
past the OS.</p>

<p>Then a friend of mine brought his Powerbook over running OS X. It immediately changed my mind. That machine was a revelation to me. &ldquo;Holy shit!&rdquo; I said,
&ldquo;This is a Mac??&rdquo;. &ldquo;Yes&rdquo;, he replied. &ldquo;This is a Mac.&rdquo;.</p>

<p>I went out a few weeks later and bought the iBook. Every device they released after that I felt the same reverence for:</p>

<ul>
<li>iPod</li>
<li>iPod video</li>
<li>iPhone</li>
<li>iPad</li>
<li>Apple TV</li>
</ul>

<p>All of them brought joy to my life. I dutifully upgraded my Apple devices throughout the years.</p>

<p>I&rsquo;ve owned iBooks, MacMini&rsquo;s, MacBooks, MacBook Airs and now MacBook Pros. I&rsquo;ve been running the Pro series for the last 5+ years. I&rsquo;ve owned basically every
generation of iPhone to date (I <em>am</em> an iOS developer after all), and various iPads. You name it, I&rsquo;ve bought it.</p>

<p>I also continued to watch WWDC year after year soaking up all the SDK updates for OS X, then for iOS. Objective C was never my language of choice, but
I used it, and grew to appreciate all the square brackets. It wasn&rsquo;t until the announcement of Swift that I realized my appreciation for the spacing
in ObjC was more stokcholme syndrome.</p>

<p>Over the years, I must admit I became more and more discouraged with the direction Apple was taking for their products.</p>

<p>The hardware wasn&rsquo;t really pushing the envelope, the build quality of both the hardware and software seemed to be suffering. All the new features brought
to iOS seemed a lot like &ldquo;me too&rdquo; features, years after Android (or even BlackBerry) had released them.</p>

<p>Not to mention the plethora of issues with their latest keyboard.</p>

<p>WWDC 2019 however has me excited for the first time in years. They announced a number of things that have me excited.</p>

<h2>SwiftUI</h2>

<p>Using swift within UIKit has always seemed a bit clunky.</p>

<p>The introduction of SwiftUI seems to address this in a big way, and I&rsquo;m sure it&rsquo;s the direction Apple will be moving in going into the future.</p>

<p>A quick glance at the declaritive style of reminds me very much of how you go about declaring your UI in React Native. A style that is very easy to understand.</p>

<p>And the new design tools look incredible as well. No longer having to recompile the app in order to see if moving your component 3 points to the left is what you want
is going to be a big game changer for a lot of developers. This is going to get XCode one step closer to the design experience of Anroid Studio, or StoryBooks in RN.</p>

<h2>iPad OS</h2>

<p>With regards to the iPad, it always felt to me like a missed opportunity. It was always treated as just a big iPhone. The device turned into a convenient
way for me to watch Netflix on the go.</p>

<p>I&rsquo;ve always wanted to use it to write my notes, but the lag on any of the 3rd party stylus&rsquo; have always been too long. The Pencil is much better, but still not quite fast enough for me to jot down a small note while working.</p>

<p>However this year they are finally starting to use the plethora of screen realestate. Allowing multiple apps to move around, decreased the Pencil lag to 9ms!
That&rsquo;s crazy! At 9ms I think I&rsquo;ll be able to finally realize my dream of going fully paperless!</p>

<p>And my most anticipated feature: Sidecar. Yes! Finally allowing me to extend my MacBook Pro&rsquo;s screen to a second monitor when I&rsquo;m on the go (I&rsquo;m on the go a lot).</p>

<h2>Catalina</h2>

<p>No more iTunes. I mean I don&rsquo;t think I can add any more to this.</p>

<p>Sidecar (again)</p>

<p>More security. I really appreciate the stance Apple is making on security. Bringing it front and centre, and making it secure by default.</p>

				]]>
			</description>
			<pubDate>Sat, 20 Jul 2019 18:06:25 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/my_thoughts_on_wwdc_2019.html</guid>
		</item>
	
		<item>
			<title>Creating My Ideal React Native Projects With TypeScript ESLint, Prettier and VSCode</title>
			<link>http://RyanNickel.com/html/creating_my_ideal_react_native_projects_with_typescript_eslint,_prettier_and_vscode.html</link>
			<description>
				<![CDATA[
					<p>With the <a href="https://medium.com/palantir/tslint-in-2019-1a144c2317a9">announcement of TSLint being deprecated in favour of using ESLint</a>
I thought it was a good opportunity to set up a template project with my five required features on any React Native project I start. Namely:</p>

<ol>
<li>Writing in TypeScript with proper linting</li>
<li>Utilize Prettier to automatically fix code styles</li>
<li>Set up VSCode for live linting</li>
<li>Set up VSCode to properly format using Prettier config on save</li>
<li>Resolve imports from the root instead of relatively (i.e. no <code>import x from '../../../x';</code>)</li>
</ol>

<p>This post is really more for myself as a reminder on what is required to meet the above conditions. As I learn more I&rsquo;ll update this post.</p>

<p>This took me <em>far</em> longer than I had originally anticipated. Although I&rsquo;m not new to React Native, I am new to some of the more advanced
JavaScript tooling.</p>

<p>I won&rsquo;t go through all of the things that I tried and <em>didn&rsquo;t</em> work, as there were far too many of them and I can&rsquo;t fully recall the number of hoops
I tried to jump through before realizing they were the wrong hoop to begin with. (note to self: I should document my processes <em>as</em> they&rsquo;re happening,
instead of after the fact).</p>

<p>Let&rsquo;s walk through the process of creating an entirely new React Native TypeScript project, then set up the project to address the 5 requirements outlined
above.</p>

<p>Thankfully the process of adding TypeScript to the RN projects has been greatly simplified. Let&rsquo;s stick with the React Native convention and create a new
project <strong>MyAwesomeProject</strong></p>

<pre><code>$ react-native init MyAwesomeProject --template typescript
</code></pre>

<p>Done. We&rsquo;re running on TypeScript. Huzzah!</p>

<p>Now let&rsquo;s set up the recommended VSCode extensions so we can verify the linting rules as we do everything:</p>

<pre><code>$ cd MyAwesomeProject
$ mkdir .vscode &amp;&amp; cd .vscode
$ touch extensions.json
$ touch settings.json
$ cd ..
$ mkdir src
$ code .
</code></pre>

<p>This will create the .vscode project folder and open up the project.</p>

<p>I prefer to keep my folder structure as follows:</p>

<pre><code>MyAwesomeProject
|____tests__/
|__.vscode/
|__android/
|__ios/
|__src/
|  |__components/ // general components shared throughout the codebase
|  |__scenes/ // full screen sections
|  |  App.tsx
|
|  .bablerc.js
|  ...
|  etc
|  ...
</code></pre>

<p>This will become important when specifying the root paths in <code>tsconfig.json</code> and <code>.babelrc.js</code>.</p>

<p>Let&rsquo;s update the <code>extensions.json</code> file as below:</p>

<h2>./vscode/extensions.json</h2>

<pre><code>{
  &quot;recommendations&quot;: [
    &quot;dbaeumer.vscode-eslint&quot;,
    &quot;esbenp.prettier-vscode&quot;
  ]
}
</code></pre>

<p>Now we can make sure that everyone opening this project will use the same default extensions and have the same consistent tooling.</p>

<p>Now it&rsquo;s time to start adding the various dependencies:</p>

<p>Open up the VSCode terminal by pressing <code>CTRL +</code>`.</p>

<p>Let&rsquo;s start adding some dependencies:</p>

<pre><code>$ yarn add --dev     @typescript-eslint/eslint-plugin \
  @typescript-eslint/parser \
  babel-eslint \
  babel-plugin-module-resolver \
  eslint \
  eslint-config-airbnb \
  eslint-config-prettier \
  eslint-config-react \
  eslint-import-resolver-babel-module \
  eslint-import-resolver-typescript \
  eslint-plugin-import \
  eslint-plugin-jsx-a11y \
  eslint-plugin-module-resolver \
  eslint-plugin-prettier \
  eslint-plugin-react \
  prettier \
  react-native-typescript-transformer \
</code></pre>

<p>Phew! That&rsquo;s a lot of dependencies. Welcome to JavaScript I guess!</p>

<p>Note: I prefer to use the default Airbnb rules. (side note: Want to learn more about JavaScript eccentricities? Read the <a href="https://github.com/airbnb/javascript">Airbnb JavaScript style guide</a>)</p>

<p>Finally, let&rsquo;s modify a few config files.</p>

<h2>./vscode/settings.json</h2>

<pre><code>{
  &quot;search.exclude&quot;: {
    &quot;ios/build&quot;: true,
    &quot;android/app/build&quot;: true,
  },
  &quot;editor.formatOnSave&quot;: false,
  &quot;editor.trimAutoWhitespace&quot;: true,
  &quot;editor.tabSize&quot;: 2,
  &quot;editor.rulers&quot;: [
    150
  ],
  &quot;eslint.autoFixOnSave&quot;: true,
  &quot;eslint.validate&quot;: [
    {
      &quot;language&quot;: &quot;javascript&quot;,
      &quot;autoFix&quot;: true
    },
    {
      &quot;language&quot;: &quot;javascriptreact&quot;,
      &quot;autoFix&quot;: true
    },
    {
      &quot;language&quot;: &quot;typescript&quot;,
      &quot;autoFix&quot;: true
    },
    {
      &quot;language&quot;: &quot;typescriptreact&quot;,
      &quot;autoFix&quot;: true
    }
  ],
  &quot;files.exclude&quot;: {
    &quot;**/node_modules&quot;: true,
    &quot;**/android/app/build&quot;: true,
    &quot;**/ios/build&quot;: true
  },
  &quot;files.insertFinalNewline&quot;: true,
}
</code></pre>

<h2>.eslintignore</h2>

<pre><code>src/registerServiceWorker.js
src/**/__tests__/**
babel.config.js
index.js
node_modules/**
ios/**
android/**
</code></pre>

<h2>.eslint.js</h2>

<pre><code>module.exports = {
  &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,
  &quot;plugins&quot;: [
    &quot;@typescript-eslint&quot;,
    &quot;prettier&quot;,
    &quot;import&quot;,
    &quot;module-resolver&quot;
  ],
  &quot;extends&quot;: [
    &quot;airbnb&quot;,
    &quot;plugin:@typescript-eslint/recommended&quot;,
    &quot;plugin:import/typescript&quot;,
    &quot;plugin:react/recommended&quot;,
    &quot;plugin:import/recommended&quot;,
    &quot;prettier&quot;,
    &quot;prettier/@typescript-eslint&quot;,
    &quot;prettier/react&quot;
  ],
  &quot;env&quot;: {
    &quot;browser&quot;: true,
    &quot;jasmine&quot;: true,
    &quot;jest&quot;: true
  },
  &quot;rules&quot;: {
    &quot;prettier/prettier&quot;: [&quot;error&quot;],
    &quot;@typescript-eslint/explicit-member-accessibility&quot;: 0,
    &quot;@typescript-eslint/no-empty-interface&quot;: 0,
    &quot;@typescript-eslint/explicit-function-return-type&quot;: 0,
    &quot;@typescript-eslint/no-non-null-assertion&quot;: 0,
    &quot;@typescript-eslint/no-use-before-define&quot;: 0,
    &quot;no-use-before-define&quot;: 0,
    &quot;@typescript-eslint/indent&quot;: [&quot;error&quot;, 2],
    &quot;max-len&quot;: [&quot;error&quot;, 150],
    &quot;react/jsx-filename-extension&quot;: [1, { &quot;extensions&quot;: [&quot;.jsx&quot;, &quot;.tsx&quot;] }],
    &quot;object-curly-newline&quot;: [&quot;error&quot;, { &quot;ImportDeclaration&quot;: &quot;never&quot; }],
    &quot;@typescript-eslint/interface-name-prefix&quot;: 0,
    &quot;class-methods-use-this&quot;: 0,
    &quot;no-unused-vars&quot;: 0,
    &quot;@typescript-eslint/no-unused-vars&quot;: [&quot;error&quot;, { &quot;argsIgnorePattern&quot;: &quot;^_[0-9]?&quot; }],
    &quot;react/display-name&quot;: 0,
    &quot;react/prop-types&quot;: 0, // not necessary as we use typescript
    &quot;object-curly-newline&quot;: 0,

  },
  &quot;settings&quot;: {
    &quot;import/resolver&quot;: {
      &quot;babel-module&quot;: {},
      &quot;typescript&quot;: {}
    }
  },
  &quot;globals&quot;: {
    &quot;__DEV__&quot;: true
  }
}
</code></pre>

<p>Note I prefer the js extension so I can add inline comments.</p>

<h2>.prettierrc.js</h2>

<pre><code>module.exports = {
  &quot;tabWidth&quot;: 2,
  &quot;semi&quot;: true,
  &quot;singleQuote&quot;: true,
  &quot;trailingComma&quot;: &quot;all&quot;,
  &quot;printWidth&quot;: 150,
  &quot;bracketSpacing&quot;: true
};
</code></pre>

<h2>.babelrc.js</h2>

<pre><code>module.exports = {
  presets: [
    'module:metro-react-native-babel-preset'
  ],
  plugins: [
    ['module-resolver',
      {
        extensions: [
          '.js',
          '.jsx',
          '.ts',
          '.tsx'
        ],
        root: [&quot;./src&quot;],
        alias: {
          &quot;resources&quot;: &quot;./resources&quot;
        }
      }
    ]
  ]
};
</code></pre>

<p>Note: I prefer to use the name <code>.bablerc.js</code> to stick with the other config file naming conventions.</p>

<h2>tsconfig.json</h2>

<pre><code>{
  &quot;compilerOptions&quot;: {
    &quot;allowJs&quot;: true,
    &quot;allowSyntheticDefaultImports&quot;: true,
    &quot;esModuleInterop&quot;: true,
    &quot;isolatedModules&quot;: true,
    &quot;jsx&quot;: &quot;react&quot;,
    &quot;lib&quot;: [
      &quot;es6&quot;
    ],
    &quot;module&quot;: &quot;es2015&quot;,
    &quot;moduleResolution&quot;: &quot;node&quot;,
    &quot;noEmit&quot;: true,
    &quot;strict&quot;: true,
    &quot;target&quot;: &quot;esnext&quot;,
    &quot;baseUrl&quot;: &quot;./src&quot;,
    &quot;rootDir&quot;: &quot;./src&quot;,
    &quot;resolveJsonModule&quot;: true
  },
  &quot;exclude&quot;: [
    &quot;node_modules&quot;,
    &quot;babel.config.js&quot;,
    &quot;metro.config.js&quot;,
    &quot;jest.config.js&quot;
  ]
}
</code></pre>

<p>That&rsquo;s about it. Now get started writing your next world-changing app with sane defaults.</p>

<p>I&rsquo;ve created a <a href="https://github.com/mrnickel/ReactNativeTypeScriptConfigDemo">demo project on GitHub</a>. If you have any recommendations on how I can make this better please feel free to submit a PR!</p>

				]]>
			</description>
			<pubDate>Tue, 04 Jun 2019 15:41:58 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/creating_my_ideal_react_native_projects_with_typescript_eslint,_prettier_and_vscode.html</guid>
		</item>
	
		<item>
			<title>Rendering dynamic components with React Native and the performance implications</title>
			<link>http://RyanNickel.com/html/rendering_dynamic_components_with_react_native_and_the_performance_implications.html</link>
			<description>
				<![CDATA[
					<p>I am currently working on a project that cries out for flexibility and dynamic functionality. Different builds require slightly different UI.
Thankfully the same actions and business logic apply.</p>

<p>My concern:</p>

<p>Because all builds are branched off of the same master branch, and each build could have slightly different UI any upstream bug fixes could
potentially overwrite existing UI or cause conflicts. Both issues I would like to try to avoid.</p>

<p>I wanted to accomplish the above for developer frendliness while alsp keeping the app as performant as possible.</p>

<p>Aside: Generally when creating an app you want to aim for 60 frames per second. This means that the render time goal is 16ms or less.</p>

<p>My solution:
Because my React Native app runs on Redux I could leverage the container / dumb component design pattern to ensure that no potential business
logic was lost. I could also use this to potentially swap out the UI component based on a builds configuration.</p>

<p>i.e. The container would <code>connect</code> all the appropriate props and dispatch actions, then <code>render</code> the appropriate component for the build.</p>

<p>Step 1:
First I wanted to verify that it was possible to import a component outside of the standard <code>import component from ...</code> syntax with the
<code>require</code> syntax, so that I could then verify that my desired pattern was even a possibility.</p>

<p>Assumption: Totally possible</p>

<pre><code>render() {
  const listItemRowComponent = require('src/components/ListItemRowComponent1.tsx')
  return (&lt;listItemRowComponent prop1={'value1'} prop2={'value2} /&gt;)
}
</code></pre>

<p>Step 2:
I refreshed my screen, and success! It worked! Whenever implementing a new pattern I always try to measure the performance implications.</p>

<p>Now what?
The question I wanted to answer was what are the performance implications of requiring this component every time instead of simply importing
it at the top of my class component.</p>

<p>Step 3:
Now I wanted to do was establish a performance baseline. How many milliseconds on average would it take to render my component when doing
a standard <code>import</code>?</p>

<p>Step 4:
So I fired up Google Chrome&rsquo;s peformance tool, started the recording, navigated to the screen, waited for the load and scrolled down a bit.</p>

<p>I then investigated the results:</p>

<p><img src="/images/base_line.png" alt="Baseline" title="Baseline" /></p>

<p>At a glance, it looks as though the average rendering time is about 7ish ms. Fantastic! Under that desired 16ms we aim for.</p>

<p>I wonder what the <a href="https://facebook.github.io/react-native/docs/performance#what-you-need-to-know-about-frames">React Native Perf Monitor</a> showed as well with regards to RAM usage and UI vs JS frames per second.</p>

<p>Before loading the list: 137ish MB, with 60 / 60 FPS.</p>

<p>Navigate to the List, load the 500 rows:</p>

<ul>
<li>Ram goes up to: 158ish MB</li>
<li>with scrolling, I see the UI thread go down to 58, but the JS stays consistent at 60. Great!</li>
</ul>

<p>Step 5:
I then implemented the above <code>render()</code> function to see what, if any, performance implications</p>

<p>Assumption: I won&rsquo;t see any dramatic differences.</p>

<p><img src="/images/require_all_the_time.png" alt="Require All The Time" title="Require all the time" /></p>

<p>There was a slight increase with this new method, but not dramatically so. I would say that it&rsquo;s acceptable.</p>

<p>One thing that I did notice however was that the Perf Monitor showed that the RAM usage went from about 158ish MB to 172ish MB. Not substantial, but not insigificant either.</p>

<p>Now I have two questions:</p>

<ol>
<li>Obviously just requiring from a static string is no more flexible than doing an <code>import</code> from the top of the file. Can I use a variable?</li>
<li>Can I get that memory usage back down?</li>
</ol>

<p>The answer to the first question seems pretty obvious at first blush.</p>

<p>Simply add a configuration property and reference it.</p>

<pre><code>// config.ts
export default {
  listItemRowComponent: 'src/components/ListItemRowComponent1.tsx'
}

// component.ts
render() {
  const listItemRowComponent = require(config.listItemRowComponent)
  return (&lt;listItemRowComponent prop1={'value1'} prop2={'value2'} /&gt;)
}
</code></pre>

<p>Turns out RN isn&rsquo;t a big fan of this approach, and I got the Red Screen of Death.</p>

<p>Okay. I definitely wanted to be able to define which component to use in my config file. What do I do?</p>

<p>Step 6:
At this point I did what all developers do in this situation &ndash; I Googled. It then pointed me to this wonderful <a href="https://stackoverflow.com/questions/33907218/react-native-use-variable-for-image-file">StackOverflow</a> post.</p>

<p>Of course! Just <code>require</code> it directly into my config value:</p>

<pre><code class="language-config.ts">export default {
  listItemRowComponent: require('src/components/ListItemRowComponent1.tsx').default
}
</code></pre>

<p>Step 7:
Then simply render the <code>config.listItemRowComponent</code> as such:</p>

<pre><code class="language-component.ts">render() {
  return (&lt;config.listItemRowComponent prop1={'value1'} prop2={'value2'} /&gt;)
}
</code></pre>

<p>And it works! Awesome. This makes me happy. It&rsquo;s configurable, extendable and manageable. Great &lsquo;ables&rsquo; all around. And it&rsquo;s performant.</p>

<p>Taking a quick view of the performance snapshop I&rsquo;m seeing render times of roughly 9ms for the component when referenced as such.</p>

<p><img src="/images/require_config.png" alt="Require in config" title="Require in config" /></p>

<p>Perf Monitor is also reporting that my RAM usage is comparable to the standard <code>import component from ...</code> syntax.</p>

<p>Fantastic!</p>

<p>My conclusion:</p>

<p>One big downside to this pattern is that you lose the ability to quickly navigate to a UI components implementation within VS code, directly linking between
props and implementations.  You also lose the ability to refactor property types. Linters aren&rsquo;t going to catch any issues with the props either.
This could be an issue if you use these tools as crutches. I know that I rely heavily on the refactor abilities (naming things is not easy).</p>

<p>Note that perf monitor, and the Google Chrome Performance recording isn&rsquo;t exact. The app was tested while in DEV mode, which means that the performance
will be worse than in prodiction, however my thoughts are that if I can get the app running well without any React optimizations, when those are in place
the app will run even smoother.</p>

				]]>
			</description>
			<pubDate>Wed, 08 May 2019 09:59:01 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/rendering_dynamic_components_with_react_native_and_the_performance_implications.html</guid>
		</item>
	
		<item>
			<title>Migrating from 1Password to KeePassXC</title>
			<link>http://RyanNickel.com/html/migrating_from_1password_to_keepassxc.html</link>
			<description>
				<![CDATA[
					<p>I&rsquo;m a big proponent of password managers, and I&rsquo;ve been a heavy user of 1Password for a long time now. Several years ago, I purchased it for Mac, Windows, iOS and Android.</p>

<p>Fast forward to today and they&rsquo;ve updated to a subscription model, and they host the passwords online.</p>

<p>I completely understand their need to continue to generate revenue from existing customers in order to improve the product and as a software developer myself I sympathize with them. However I don&rsquo;t want to add yet another monthly subscription to my wallet.</p>

<p>On a security note, I&rsquo;m not so inclined to host my passwords on a 3rd party platform. I feel it&rsquo;s too big of a honey pot. I prefer to keep my important files offline. (I also don&rsquo;t support services like Dropbox for anything important). Especially seeing as services like LastPass <a href="https://www.pcworld.com/article/2936621/the-lastpass-security-breach-what-you-need-to-know-do-and-watch-out-for.html">have already been breached</a>.</p>

<p>While my current version of 1Password continues to work just fine across my devices, they&rsquo;re not actively improving the software, so I&rsquo;ve decided to try to find an open source alternative which hopefully I can help contribute to.</p>

<p>After some research, I stumbled across <a href="https://keepassxc.org/">KeePassXC</a> as recommended by <a href="https://ssd.eff.org/en/module/how-use-keepassxc">EFF</a> and thought I&rsquo;d give it a try.</p>

<p>The first hurdle I wanted to jump was getting my 1Password content into KeePassXC.</p>

<p>To do that:</p>

<ol>
<li>Open 1Password, log in, and select the vault (if on Mac).</li>
<li>File &gt; Export &gt; All Items. Enter your password.</li>
<li>Change the File Format to <strong>CSV</strong>. Leave everything else the same and press <strong>Save</strong></li>
<li>Open KeePassXC</li>
<li>Select <strong>Import from CSV</strong> and select the file you exported from 1Password</li>
<li>Create a password to unlock and select <strong>OK</strong></li>
<li>In the top section, select <strong>Consider &lsquo;\&rsquo; an escape character</strong></li>

<li><p>Set the following columns:</p>

<p>Group: <strong>Not present</strong></p>

<p>Title: <strong>Column 3</strong></p>

<p>Username: <strong>Column 6</strong></p>

<p>Password: <strong>Column 2</strong></p>

<p>URL: <strong>Column 5</strong></p>

<p>Notes: <strong>Column 1</strong></p>

<p>Last Modified: <strong>Not present</strong></p>

<p>Created: <strong>Not present</strong></p></li>

<li><p>Press <strong>OK</strong></p></li>
</ol>

<p>If your 1Password is like mine (littered with temporary passwords), you&rsquo;re definitely going to want to go through and clean up a bunch of entries after the import.</p>

<p>I&rsquo;m going to try to use this as my main password manager for the time being, but one shortcoming I&rsquo;ve come across so far is that it&rsquo;s difficult to enter credit card information for safe keeping.</p>

<p>KeePass has a template plugin system that can handle this, so hopefully KeePassXC can implement something similar.</p>

<p>Another good article worth mentioning to better acquaint you with the ins and outs of the software is posted by <a href="http://samschlinkert.com/">Sam Schlinkert</a> <a href="https://sts10.github.io/2017/06/27/keepassxc-setup-guide.html">Getting Started With KeePassXC</a></p>

				]]>
			</description>
			<pubDate>Wed, 02 Jan 2019 14:41:54 -0800</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/migrating_from_1password_to_keepassxc.html</guid>
		</item>
	
		<item>
			<title>On Deleting My Facebook Account</title>
			<link>http://RyanNickel.com/html/on_deleting_my_facebook_account.html</link>
			<description>
				<![CDATA[
					<p>I&rsquo;m deleting my Facebook account.</p>

<p>The last straw for me was the revelation that they <a href="https://techcrunch.com/2018/09/27/yes-facebook-is-using-your-2fa-phone-number-to-target-you-with-ads/">use your 2FA phone number to target you with ads</a>.</p>

<p>Over the years, as more and more stories were published on the grounds of fraud and breaches, I&rsquo;ve become ever more vigilant in adding 2FA to all of my accounts (preferring One-Time-Password generators over SMS, but c&rsquo;est a vie). Some time ago I logged into my FB account in order to add that extra layer of security. I gave them my phone number. Fast forward to the present and we find out that FB transparently uses my phone number for advertising purposes.</p>

<p>There are simply too many examples of FB abusing their power and I&rsquo;ve had enough.</p>

<ul>
<li><a href="https://techcrunch.com/2018/09/27/yes-facebook-is-using-your-2fa-phone-number-to-target-you-with-ads">Yes Facebook is using your 2FA phone number to target you with ads</a></li>
<li><a href="https://www.bloomberg.com/news/articles/2018-09-28/facebook-says-security-breach-affected-about-50-million-accounts">Facebook Says Breach Affected About 50 Million Accounts</a></li>
<li><a href="https://nypost.com/2018/10/01/facebook-hackers-got-access-to-tinder-spotify-instagram-and-more/amp/">Facebook hackers got access to Tinder, Spotify, Instagram and more</a></li>
<li><a href="https://www.msn.com/en-ca/news/canada/facebook-hit-with-class-action-lawsuit/ar-BBNOfEs?li=AAggNb9">Facebook hit with class action lawsuit</a></li>
<li><a href="https://www.cnbc.com/2018/03/21/facebook-cambridge-analytica-scandal-everything-you-need-to-know.html">Here&rsquo;s everything you need to know about the Cambridge Analytica scandal</a></li>
</ul>

<p>That&rsquo;s just a small sample of boundaries that have been crossed over the past few months!</p>

<p>My desire to leave the social media network giant has been festering for quite some time. It has been years since I actively enjoyed logging in to catch up with whatever I&rsquo;ve missed. Now whenever I sign in I scroll for a few seconds, roll my eyes, and log out.</p>

<p>I was having a conversation with a friend of mine over lunch about leaving the social network (he hasn&rsquo;t had an account in years), and one thing he said really struck a chord.</p>

<blockquote>
<p>No one ever says &ldquo;Hey, did you see that thing on Facebook?&rdquo;</p>
</blockquote>

<p>It&rsquo;s a phrase literally never uttered in my circle of friends.</p>

<p>Each time I log into the service it&rsquo;s just a slew of garbage. Misleading political memes, &ldquo;funny videos&rdquo;, and terribly biased news. It&rsquo;s garbage, I&rsquo;m tired of it, and I&rsquo;m leaving.</p>

<p>My wife also isn&rsquo;t a big user of the network. We&rsquo;ve recently become parents, and immediately shared the news, to each of our closest friends and family. We then felt <em>obligated</em> to post an announcement on FB. Neither of us <em>wanted</em> to do it. Why? We felt that sharing the news to FB was going to:</p>

<p>a) be just another signal lost in the noise
b) pervert the purity of the event by surrounding it with the garbage that is now Facebook content
c) minimize the emotional importance and personal excitement of our baby announcement</p>

<p>Am I worried about &ldquo;missing out&rdquo; on something? Not at all. My closest friends and I exchange messages about what&rsquo;s going on. Add to that the fact that when we get together we actually have something to talk about. Stories to share. It makes an evening out with friends that much more enjoyable. I&rsquo;d much rather sit down with friends as they personally recount their travelling adventures.</p>

<p>I realize that my small protest will make zero impact. Facebook will go on being Facebook and will continue making their revenue. The masses will continue to use Facebook because everyone else is doing it.</p>

<p>That&rsquo;s fine. But it&rsquo;s just not for me.</p>

<p>At this stage in my life, I&rsquo;ve learned to be a non-conformist.</p>

<p>/rant</p>

				]]>
			</description>
			<pubDate>Wed, 31 Oct 2018 14:20:23 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_deleting_my_facebook_account.html</guid>
		</item>
	
		<item>
			<title>Docker and Charles</title>
			<link>http://RyanNickel.com/html/docker_and_charles.html</link>
			<description>
				<![CDATA[
					<p>Ah, <a href="https://www.charlesproxy.com/">Charles</a>. Every mobile developers&rsquo; best friend. When logging fails and you just can&rsquo;t figure it out, it&rsquo;s time to go deep into the system and see the raw data.</p>

<p>This is a post I&rsquo;ve been meaning to write for a long time.</p>

<p>It&rsquo;s my go-to tool when I&rsquo;m debugging network calls in my Swift code.</p>

<p>My preferred development process is to run services locally via <code>docker-compose up</code>. This ensures I do not step on anyone&rsquo;s toes (amongst other benefits on which I&rsquo;ll write later)</p>

<p>You may have noticed, however, that starting up Charles causes your docker container to shut down! Oh no! What&rsquo;s a dev to do?!</p>

<p>Why does this happen? I&rsquo;m not sure! I wish I could tell you that I knew enough about the inner workings of Docker to give you an idea as to why this happens, but I can&rsquo;t (for now).</p>

<p>I do however have a solution that works for me. Simply go into your docker menu &gt; proxies &gt; enable <strong>Manual Proxy configuration</strong>. I leave all other fields blank (default values). Now Apply &amp; Restart, start your Docker containers and all is well with the world!</p>

<p>This solution has proven useful to me, and I hope it does the same for you.</p>

				]]>
			</description>
			<pubDate>Tue, 15 May 2018 22:16:48 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/docker_and_charles.html</guid>
		</item>
	
		<item>
			<title>More Project Updates</title>
			<link>http://RyanNickel.com/html/more_project_updates.html</link>
			<description>
				<![CDATA[
					<p>As I write more posts I&rsquo;ve noticed more and more glaring holes in my site design / <a href="https://github.com/mrnickel/StaticSiteGenerator">StaticSiteGenerator</a> solution. A few pain points if you will. In an effort to reflect on my projects every so often I figured I&rsquo;d take a few notes on my blog / StaticSiteGenerator.</p>

<h2>What&rsquo;s the goal?</h2>

<p>I believe it&rsquo;s important for developers to take a step back and reflect on what their solutions original goals were. This allows us to put things into perspective. Did we veer way off course? Did our solution even solve our original problems? What do we need going forward?</p>

<p>My goals for the StaticSiteGenerator was:</p>

<ol>
<li>Play with, and learn a new programming language (Go)</li>
<li>Get a basic solution up that would allow me to periodically write blog posts</li>
</ol>

<p>The initial MVP (minimum viable product) certainly solved these 2 problems. I&rsquo;m a big fan of releasing MVP&rsquo;s early and often, as the benefits (which are evident even with this small project), are that you identify what is actually required earlier. As a result you don&rsquo;t waste valuable time developing unnecessary features.</p>

<p>The first implementation allowed me to start generating content and establishing a (small) social presence; however as is also so often the case with MVP&rsquo;s, I was able to learn some things quickly, like my site&rsquo;s poor design.</p>

<h3>Bad design</h3>

<p>First off, the design just wasn&rsquo;t working for me. The initial visit would show a user a giant wall of text. A little intimidating. What I decided to do instead was display only the first paragraph of each post. This was a pretty easy implementation from the Go side, however it revealed another hole in my site.</p>

<h3>Bad writing style</h3>

<p>What I realized was that my posts didn&rsquo;t have a proper introduction. No real hook. This is just bad. Who&rsquo;s going to continue reading a post when they don&rsquo;t really know what it&rsquo;s about? Luckily I didn&rsquo;t have a lot of posts that needed to be addressed haha. As I was modifying my posts I realized another feature that should be implemented. The ability to preview posts.</p>

<h3>Can&rsquo;t easily preview posts</h3>

<p>This was more of an annoyance during the writing process than anything else. It&rsquo;s always nice to see how the markdown will be generated into the template. To that end I implemented a <code>preview</code> function. What I wanted was to issue a <code>preview</code> command, specifying which post, then automatically launch my web browser to the page. This lead me to the final hole: the inability to launch the website locally.</p>

<h3>Built in webserver</h3>

<p>In order for me to preview the post, I would have to start a local webserver. When I first started, I didn&rsquo;t want to go through all the trouble of setting up apache, so instead I would fire up the <a href="http://php.net/manual/en/features.commandline.webserver.php">built-in PHP webserver</a>. <code>php -S localhost:8080</code> from within the root directory, and visit <a href="http://localhost:8080/index.html">http://localhost:8080/index.html</a>. This was another minor annoyance, and I&rsquo;m ultimately curious about writing web apps and microservices in Go. Like everyone else I used the standard libraries <a href="https://golang.org/pkg/net/http/">net/http</a> package to serve up the site. It was amazingly easy to implement and I&rsquo;ve had no issues with it thus far.</p>

<h2>Did I veer off course?</h2>

<p>Because I&rsquo;m a major proponent for realeasing MVP&rsquo;s I didn&rsquo;t have the opportunity to veer off course. Not that I wasn&rsquo;t tempted to. If you look at my list of <a href="https://github.com/mrnickel/StaticSiteGenerator">todos</a> you&rsquo;ll see that I have a number of features that I am eager to implement. &ldquo;Well, this is only a hobby project&rdquo;, I would tell myself &ldquo;What harm would it do if I spent some time implementing a spell checker?&rdquo;. And honestly, it won&rsquo;t harm anything. I don&rsquo;t make any money from this site, and it would further my learning in Go (my first project goal). However I believe that like anything else, practice makes perfect. And forcing yourself to adhere to various processes is also important to practice.</p>

<h2>Did my solution help me achieve my goals?</h2>

<p>As mentioned earlier, my primary objective was to learn Go. I spent a lot of time reading other peoples blog posts (which is what intrigued me so much about this language), but I had no real first hand knowledge of it. This gave me the opportunity to learn a bit more about the language.</p>

<p>My second objective was to own a platform that would allow me to generate posts in order to establish a small social presence. Admittedly this could have been easily done by using a solution like <a href="http://gohugo.io">Hugo</a>. I could simply <code>brew update &amp;&amp; brew install hugo</code>, and be off to the races. However, this would be counter to my first goal; As this is really a secondary goal I found it to be a fair tradeoff.</p>

<h2>What do I need going forward?</h2>

<p>At this point I&rsquo;m not too sure what I&rsquo;ll need. I have a few ideas of course, as is evidenced in my &ldquo;To-Do&rdquo; list. However, which ones are most important? <em>That</em> I&rsquo;m still not sure of. I won&rsquo;t really know until the project matures a bit. I&rsquo;ll need more content, more visitors, more learnings in order to determine which feature is the greatest importance. Is there any way for me to accelerate up my education? Absolutely there is. I could formally promote the project; Get more developers and writers using it. That would give me more diverse feedback about the project. My main goal with this project however is learning Go, and to that end I&rsquo;ll likely choose to implement a feature that would be interesting to solve.</p>

<h2>Conclusion</h2>

<p>Overall I&rsquo;m satisfied with where I&rsquo;ve gotten with these projects. I&rsquo;ve learned a little bit of Go, and I&rsquo;ve got a website that justifies it. The StaticSiteGenerator is evolving organically and is working quite well for my needs, although I still wouldn&rsquo;t recommend anyone else use it as it&rsquo;s not nearly up to par with the other solutions on the market. I&rsquo;ve also started gathering some followers across the various social webs. I&rsquo;ll continue to write about the projects as they mature further.</p>

				]]>
			</description>
			<pubDate>Fri, 08 Apr 2016 08:43:47 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/more_project_updates.html</guid>
		</item>
	
		<item>
			<title>Logging with Docker and Sumo Logic</title>
			<link>http://RyanNickel.com/html/logging_with_docker_and_sumo_logic.html</link>
			<description>
				<![CDATA[
					<p>SumoLogic is another player in the ever growing logging aggregator / log analytics service providers. In my quest to find the &ldquo;sweet spot&rdquo; of tools to use for my software solutions I thought I&rsquo;d give them a try. It also gave me the opportunity to dive deeper into Docker and explore my options.</p>

<p>I was asked by Houston of <a href="https://www.sumologic.com">Sumo Logic</a> to do a writeup about linking docker logging with their service.</p>

<p>I take a peek at their website and it looks like a pretty solid product. The dashboard looks comprehensive, robust and professional.</p>

<p>Again, my goal for these posts is to investigate logging aggregators with the twelve-factor app&rsquo;s idea of sending logs to STDOUT.</p>

<p>At first blanche, it looks as though their docker offering is pretty straight forward. Check out their <a href="https://github.com/SumoLogic/sumologic-collector-docker">GitHub repo</a> for some basic information.</p>

<p>I&rsquo;m following their <a href="https://www.sumologic.com/2015/04/16/new-docker-logging-drivers/">New Docker Logging Drivers</a> post on how to set this up.</p>

<p>(Just so we&rsquo;re all on the same page, and no previous docker-machine modifications get in our way, I&rsquo;ll be working with a brand new clean machine titled <strong>syslogbox</strong>.)</p>

<pre><code>docker-machine create -d virtualbox \
 --engine-opt log-driver=syslog \
 syslogbox
</code></pre>

<h2>Step 1: Enable <strong>syslogd</strong> on the docker-machine</h2>

<p>It would seem logical that this would be enabled when specifying our log-driver during the machine creation process, but it isn&rsquo;t.</p>

<pre><code>$ docker-machine ssh syslogbox
$ sudo -i
$ echo &quot;syslogd -n &amp;&quot; &gt;&gt; /var/lib/boot2docker/profile
$ exit
$ docker-machine stop syslogbox
$ docker-machine start syslogbox
$ eval $(docker-machine env syslogbox)
</code></pre>

<p>Now if you want to confirm that your STDOUT messages are in fact going to syslog on your docker-machine:</p>

<p>In one terminal:</p>

<pre><code>$ docker-machine ssh syslogbox
$ sudu -i
$ tail -f /var/log/messages
</code></pre>

<p>(Some blogs will tell you that the output is found at <code>/var/log/syslog</code>, this is not so as of <strong>docker v 1.9.1</strong> running in a virtualbox VM)</p>

<p>In another terminal:</p>

<pre><code>$ docker run -d --log-driver=syslog ubuntu echo &quot;Hello&quot;
</code></pre>

<p>(You may need to re-run <code>eval $(docker-machine env syslogbox)</code> in your second terminal to ensure both terminals are communicating with the same machine.)</p>

<p>In the first terminal, you should see output similar to:</p>

<pre><code>Mar  1 22:54:40 syslogbox daemon.info docker/9bbb8798f960[1373]: Hello
</code></pre>

<p>Where <strong>9bbb8798f960</strong> is the first 12 characters of the container ID.</p>

<p>Great! Syslog is now running!</p>

<h2>Step 2: Send syslog to sumo logic</h2>

<p>It&rsquo;s time to send the syslog data up to Sumo Logic in order to actually work with it, as outlined in <em>Integrating the Sumo Logic Collector With the New Syslog Logging Driver</em>.</p>

<p>Following along with the post, I should be able to fire up the sumologic collector container, and everything should pop on up to my account:</p>

<pre><code>$ docker run -v /var/log/messages:/syslog -d \
    --name=&quot;sumo-logic-collector5&quot; \
    sumologic/collector:latest-logging-driver-syslog \
    [Access ID] [Access Key]
</code></pre>

<p>I&rsquo;ll now start up a container that will add very basic content to the syslog every second:</p>

<pre><code>$ CID=$(docker run -d --log-driver=syslog ubuntu \
         /bin/bash -c 'while true; do echo &quot;Hello&quot;; sleep 1; done')
</code></pre>

<p>Okay, it&rsquo;s running, but how do we confirm that everything within the container is a-ok?</p>

<pre><code>$ sudo docker exec -it $CID /bin/bash
$ sudo tail -f /syslog
</code></pre>

<p>(If you&rsquo;re seeing <strong>Hello</strong> echo&rsquo;d out every second, then all is well!)</p>

<p>Now log into your Sumu Logic account and see the logs come in!</p>

<p>&hellip; wait&hellip; wait&hellip; wait&hellip; nothing&hellip; wait&hellip; still nothing&hellip; get a coffee (beer)&hellip; wait&hellip; drink coffee (beer)&hellip; wait&hellip; still nothing.</p>

<p>I tried to see if there was any indication that the Sumo Logic container was running things properly, but outside of a few lines in the syslog saying that it was running, and a new collection showing up, I had nothing.</p>

<p>No indication that anything was either wrong, or right.</p>

<p>When things were at their darkest and all seemed lost, the lovely folks of Sumo Logic reached out to me to see if they could offer any help. Turns out they could!</p>

<p>They pointed out an updated document in their official help section <a href="https://service.us2.sumologic.com/help/Default.htm#Collecting_Logs_for_Docker.htm?Highlight=docker">Collecting Events and Statistics for Docker</a>. This was considerably better and FAR more straight forward.</p>

<pre><code>docker run -d -v /var/run/docker.sock:/var/run/docker.sock --name=&quot;sumologic-docker&quot; sumologic/appcollector:latest [Access ID] [Access Key]
</code></pre>

<p>This is great. Simply mount the host machines docker.sock to the Sumo Logic container and go from there. When I checked my account, I had a beer in hand prepared for the prolonged wait. To my relief, what do you know?? My logs showed up!</p>

<h2>Conclusion</h2>

<p>Don&rsquo;t worry about setting up syslog and all the trouble that comes with it. Simply mount the .sock file and go on with life. This seems to be how most logging containers are going. It makes sense to use a dedicated container to aggregate and push logs to the respective platform, as opposed to modifying each container, or even managing the logging mechanisms of the host container.</p>

<p>In my next post I&rsquo;ll write up my findings on using the Sumo Logic service.</p>

				]]>
			</description>
			<pubDate>Thu, 10 Mar 2016 06:11:23 -0800</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/logging_with_docker_and_sumo_logic.html</guid>
		</item>
	
		<item>
			<title>Playing With Docker Enviornment Variables</title>
			<link>http://RyanNickel.com/html/playing_with_docker_enviornment_variables.html</link>
			<description>
				<![CDATA[
					<p>Managing various enviornments can always be a challenging task. Things have changed substantially over the years. With the introduction of AWS and other PaaS providers introducing their own solutions and the vast differences that can occur between developers own machines, staging, QA and production, we as developers and solution architects have to be ever vigilant in our quest to keep things simple, and stable.</p>

<p>I recently read an article by Chris Stump titled <a href="http://chrisstump.online/2016/02/20/docker-existing-rails-application/">Docker for an Existing Rails Application</a> which is what got me thinking about this topic.</p>

<p>Now I’m not a Ruby developer, but I am a docker enthusiast and I’m always interested in how people are using it for their
various environments, which is why I found Chris&rsquo; post so intriguing.</p>

<p>I found one point in Chris&rsquo; post that reminded me of Part III of writing a twelve-factor app.
&gt; Docker strips out environment variables from its build process in order to keep builds consistent across all the different platforms it supports.</p>

<p>I&rsquo;m currently exploring the various implementation details for utilizing docker with twelve-factor apps.</p>

<p>Part III is concerned with storing configurations in the environment.</p>

<blockquote>
<p>Apps sometimes store config as constants in the code. This is a violation of twelve-factor, which requires strict
separation of config from code. Config varies substantially across deploys, code does not.</p>
</blockquote>

<p>It also has the added benefit of ensuring your credentials aren&rsquo;t thrown into your repos.</p>

<p>This post is more about wrapping my head around managing environments in docker, and hopefully help others with their
options.</p>

<p>The code for this experiment is posted on <a href="https://github.com/mrnickel/Experiments-DockerEnvs">GitHub</a></p>

<p>Here, I am going to explore five different ways of managing environment vars.</p>

<ul>
<li>Managed in the Dockerfile</li>
<li>Override Environment Vars When Starting The Container</li>
<li>Override Environment Vars With a File</li>
<li>Environment Vars with Docker Compose</li>
<li>Environment File with Docker Compose</li>
</ul>

<h2>Managed in the Dockerfile</h2>

<p>As I mentioned above, Chris&rsquo; post lead me to believe that hosting env vars in the dockerfile isn&rsquo;t a possibility, but I
figured I&rsquo;d put this to the test. I added the following line to my dockerfile:</p>

<pre><code>ENV TEST_ENV_ITEM=&quot;this is my stuff&quot;
</code></pre>

<p>I then built and ran the container</p>

<pre><code>docker build -t experiments-dockerenvs .
docker run experiments-dockerenvs app
</code></pre>

<p>The output for this will be:</p>

<pre><code>this is my stuff
</code></pre>

<p>It seems as though Docker has changed their stance on this.</p>

<p>The cons to this are obviously the possibility of your secret credentials leaking into your repos. A big no-no. It does however have the benefit of making things easier for new developers to get up and running.</p>

<p>I&rsquo;d recommend <strong>not</strong> having any env vars in your Dockerfile. Don&rsquo;t give your developers the opportunity to make this very simple mistake. We&rsquo;re all lazy and will, in a moment of weakness, opt for the &ldquo;easy answer&rdquo;.</p>

<h2>Override Environment Vars When Starting The Container</h2>

<p>This is a nice way to play with different configurations quickly. Docker allows you to specify env vars when running the container.</p>

<p>Run the docker container overriding the default env value:</p>

<pre><code>docker run -e 'TEST_ENV_ITEM=Override from run cmd' experiments-dockerenvs app
</code></pre>

<p>The output for this will be:</p>

<pre><code>Override from run cmd
</code></pre>

<p>The problem with this solution is that your run command can get unwieldly too long if you have more than one or two. The solution to this would be to have an override file that we can add to the run command.</p>

<h2>Override Environment Vars With a File</h2>

<p>The docker run command has a <code>--env-file</code> flag that we can specify.</p>

<pre><code>docker run --env-file=main.env experiments-dockerenvs app
</code></pre>

<p>Result output:</p>

<pre><code>&quot;Override from file&quot;
</code></pre>

<p>Note that by reviewing the <code>main.env</code> file, it&rsquo;s not formatted the same way a bash file would be.</p>

<p>Instead you have a simpler:</p>

<pre><code>TEST_ENV_ITEM=&quot;Override from file&quot;
</code></pre>

<p>As opposed to:</p>

<pre><code>export TEST_ENV_ITEM=&quot;Override from file&quot;
</code></pre>

<p>Now this seems like a maintainable way to manage various environments cleanly and easily. This is a solution I will use going forward for my own docker containers.</p>

<h2>Environment Vars with Docker Compose</h2>

<p>Docker compose is a fantastic new utility offered by the docker team. It allows you to define your stack in a single file, thus making things more defined.</p>

<p>You can specify environment variables in the <code>.yml</code> file in the same way you can in the dockerfile.</p>

<pre><code>  environment:
    - TEST_ENV_ITEM=&quot;overridden from compose&quot;
</code></pre>

<p>Running the following:</p>

<pre><code>docker-compose -f docker-compose.yml build
docker-compose -f docker-compose.yml up
</code></pre>

<p>Will return the output:</p>

<pre><code>envtest_1 | + exec app
envtest_1 | &quot;overridden from compose&quot;
experimentsdockerenvs_envtest_1 exited with code 0
</code></pre>

<p>Great! But we&rsquo;re back in the same position we were earlier. We have the potential again for us to leak secret credentials in the repos. As I stated earlier, I don&rsquo;t recommend this as a solution.</p>

<h2>Environment File with Docker Compose</h2>

<p>The last piece I want to look at, is the possibility of forcing environmental file overrides in the <code>.yml</code> file. I&rsquo;m not surprised that the great people at Docker have a resolution for this as well. The property we&rsquo;re interested in is the <code>env_file</code> property.</p>

<p>More specifically:</p>

<pre><code>  env_file:
    - ./compose-main.env
</code></pre>

<p>Running the following:</p>

<pre><code>docker-compose -f docker-compose-env.yml build
docker-compose -f docker-compose-env.yml up
</code></pre>

<p>Results in the following output:</p>

<pre><code>envtest_1 | + exec app
envtest_1 | &quot;Override from compose-main file&quot;
experimentsdockerenvs_envtest_1 exited with code 0
</code></pre>

<p>Fantastic!</p>

<h2>Conclusion</h2>

<p>There are a lot of options for us using docker when it comes to managing enviornments. The most convenient option is to specify your docker environment vars directly into the Dockerfile, or docker-compose.yml file.</p>

<p>Note: Using this allows the possibility of secure credentials leaking into your repos.</p>

<p>Personally I&rsquo;m going to refrain from using that option. I&rsquo;d be more inclined to use the .env solutions outlined above (while remembering to add the .env files to your .gitignore file!)</p>

<p>Feel free to reach me on twitter <a href="https://twitter.com/rnickel">@rnickel</a> for any input on the post!</p>

				]]>
			</description>
			<pubDate>Wed, 02 Mar 2016 09:52:18 -0800</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/playing_with_docker_enviornment_variables.html</guid>
		</item>
	
		<item>
			<title>My first go project</title>
			<link>http://RyanNickel.com/html/my_first_go_project.html</link>
			<description>
				<![CDATA[
					<p>It&rsquo;s no secret that I&rsquo;m currently enamoured with <a href="https://golang.org">Go</a>, as well as the projects it powers. (<a href="https://www.docker.com">Docker</a> I&rsquo;m looking at you). As such I recently started my first project with the lovely &ldquo;new&rdquo; language. I wanted a project that would be easy to start and equally something that I&rsquo;d get some utility out of. I thought I would get my feet wet by creating yet another <a href="https://github.com/mrnickel/StaticSiteGenerator">static site generator</a>. The very generator I use to build this site (because dogfooding is important!).</p>

<p>This post is primarily about getting myself acquainted with Go and writing my first little Go app.</p>

<p>Now, I come from a world of Java and (modern) PHP. A world where namespaces and packages abound - a world of classes. So as you can imagine, this transition made the leap to Go a little bit of a challenge. Don’t get me wrong, Go does have these attributes as well, but that&rsquo;s not what it stresses.</p>

<p>Instead, Go emphasizes simplicity.</p>

<p>As a proponent of simplicity, I decided to dive in head first!</p>

<p>I read over the documentation and got to work.</p>

<p>My <a href="https://github.com/mrnickel/StaticSiteGenerator/tree/0dca8507eed53acd1ca1bd8e92139678f79f7441">first version</a> of the app utilized four different packages (not including main):</p>

<ul>
<li><a href="https://github.com/mrnickel/StaticSiteGenerator/tree/0dca8507eed53acd1ca1bd8e92139678f79f7441/constants">constants</a></li>
<li><a href="https://github.com/mrnickel/StaticSiteGenerator/tree/0dca8507eed53acd1ca1bd8e92139678f79f7441/post">post</a></li>
<li><a href="https://github.com/mrnickel/StaticSiteGenerator/tree/0dca8507eed53acd1ca1bd8e92139678f79f7441/publish">publish</a></li>
<li><a href="https://github.com/mrnickel/StaticSiteGenerator/tree/0dca8507eed53acd1ca1bd8e92139678f79f7441/stats">stats</a></li>
</ul>

<p>It worked, but that wasn&rsquo;t my primary goal. The ultimate goal was to educate myself with Go - to learn the right way to do things. From my past experience, in order to know how to do something correctly, you have to do a few wrongs things first.</p>

<p>Now that the project was functional, it was time to take a step back and review.</p>

<p>I sought feedback from the <a href="https://www.reddit.com/r/golang">golang subreddit</a>, and a few people were kind enough to give me some pointers.</p>

<h2>My first mistake: Too Many Packages</h2>

<p>It became apparent that my head was very much in the Java world. &ldquo;Namespace and package all the things&rdquo;, my brain thought.</p>

<p>As outlined by Andrew Gerrand in Google&rsquo;s official Go blog <a href="http://blog.golang.org/organizing-go-code">Organizing Go Code</a>, this is a big no-no:</p>

<blockquote>
<p>On the other hand, it is also easy to go overboard in splitting your code into small packages, in which case you will likely become bogged down in interface design, rather than just getting the job done.</p>
</blockquote>

<p>This was me to a T. I had spent far too much time trying to &ldquo;design&rdquo; the interfaces than getting the job done (the job being to learn idiomatic Go).</p>

<p>My main concern was that I would pollute my other packages with private functions that had no business being there. However upon further analysis, I found this would be true with any sort of application.</p>

<p>The solution isn&rsquo;t packages, it&rsquo;s properly writing code (duh!)</p>

<h2>My second mistake: Too Complicated</h2>

<p>With too many packages comes increased dependencies and therefore a web of complexities. This is counter to what Go stresses (simplicity!).
Peter Bourgon&rsquo;s post about <a href="http://peter.bourgon.org/go-in-production/">Go: Best Practices for Production Enviornments</a>, is a great read. I especially liked his section on <a href="http://peter.bourgon.org/go-in-production/#repository-structure">Repository Structure</a>:</p>

<blockquote>
<p>Our best practice is to keep things simple.</p>
</blockquote>

<p>That really struck a chord with me.</p>

<p>This line even more so:</p>

<blockquote>
<p>Don’t create structure until you demonstrably need it.</p>
</blockquote>

<p>&ldquo;If it&rsquo;s good enough for SoundCloud&rdquo;, I thought, &ldquo;it&rsquo;s good enough for me!&rdquo; *1. So off I went, on a quest to simplify my application. My end result now has no packages (aside from main), and 3 files. It really doesn&rsquo;t get more straightforward than that.</p>

<p>It wasn&rsquo;t as easy as simply removing packages and tossing everything inside of the root directory. I had my reservations! Primarily, my need to keep the number of lines of code in a file as low as logically possible.</p>

<p>I typically try to keep the number of lines in a file as small as I can. To me, files with a large number of lines in it is a code smell. Obviously you should be able to refactor that, no? Well in Go that isn&rsquo;t necessarily the case. Go seems to lean towards writing code that revolves around adding functionality to structs; this rule isn&rsquo;t quite as set in stone.</p>

<p>The Go sources <a href="https://golang.org/src/net/http/request.go">burst</a> <a href="https://golang.org/src/net/http/server.go">with</a> <a href="https://golang.org/src/net/http/transfer.go">files</a> <a href="https://golang.org/src/net/http/transport.go">having</a> <a href="https://golang.org/src/time/format.go">large</a> <a href="https://golang.org/src/time/time.go">lines of code</a>. It&rsquo;s definitely going to be some time before I get a feel for things, but I&rsquo;m quite comfortable with the size of the post struct (the obvious workhorse for a project such as this).</p>

<p>There&rsquo;s only so much that one can learn in a small project, but schooling oneself is never the less the objective of this project. There&rsquo;s obviously much more I have left to grasp, but that&rsquo;s one of the best things about being a student of programming and life.</p>

<p>There&rsquo;s always more to learn; then perhaps if I’m fortunate, master.</p>

<p>If you have any feedback for me or want to chat further, hit me up on twitter <a href="https://twitter.com/rnickel">@rnickel</a></p>

<p>*1. This is a tidbit I plan on implementing in all my projects going forward, regardless of which language it&rsquo;s written in.</p>

				]]>
			</description>
			<pubDate>Thu, 18 Feb 2016 05:46:24 -0800</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/my_first_go_project.html</guid>
		</item>
	

</channel>
</rss>