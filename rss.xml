<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd">
  <channel>
    <title>RyanNickel.com</title>
    <link>http://RyanNickel.com/</link>
    <description>Ryan Nickel's thought poops</description>
    
		<item>
			<title>Creating Homebrew Package For StaticSiteGenerator Distribution</title>
			<link>http://RyanNickel.com/html/creating_homebrew_package_for_staticsitegenerator_distribution.html</link>
			<description>
				<![CDATA[
					<p>In a previous post playing with <a href="./on_adding_github_actions_to_my_staticsitegenerator.html">GitHub Actions</a> I thought it might be interseting to figure out how to distribute the binary via Homebrew.</p>

<p>While reading through the <a href="https://docs.brew.sh/Acceptable-Formulae">Acceptable Formulae</a> documentation, my dreams of being accepted into the Homebrew-core packages were dashed. (end sarcasm)</p>

<p>The primary rule that would be broken by this software are:</p>

<blockquote>
<h2>Niche (or self-submitted) stuff</h2>
</blockquote>

<p>Namely:</p>

<blockquote>
<p>be maintained (i.e. the last release wasnâ€™t ages ago, it works without patching on all Homebrew-supported OS versions and has no outstanding, unpatched security vulnerabilities)</p>
</blockquote>

<p>The software <em>has</em> had an update in the past few weeks (at time of this writing), however previous to that was 4 years ago. Not exactly actively maintained.</p>

<blockquote>
<p>be known</p>
</blockquote>

<p>Nobody knows this software exists except for myself</p>

<blockquote>
<p>be used</p>
</blockquote>

<p>As far as I know, I&rsquo;m the only user of it</p>

<blockquote>
<p>have a homepage</p>
</blockquote>

<p>&hellip; not yet, however perhaps a quick github self hosted page that&rsquo;s essentially the readme file.</p>

<p>The next question to answer is how can I self host this formula? Seeing as I highly doubt Homebrew would accept my PR (and for good reason. Please continue your processes).</p>

<p>In Homebrew parlance, what I want to create is a <a href="https://docs.brew.sh/Taps">tap</a>. By default this relies on GitHub, which is perfect for this series of events.</p>

<p>I&rsquo;m going to partially re-hash the official Homebrew documentation here for my own convenience:</p>

<ol>
<li>Create a github repo <strong>/mrnickel/homebrew-mrnickel</strong>
This is the convention that Homebrew uses in order to tap properly.</li>
<li>Create the <strong>Go</strong> formula using:
 <code>brew create https://github.com/mrnickel/StaticSiteGenerator/archive/refs/tags/{RELEASE_VERSION_HERE}.tar.gz --go</code>
This will create a formula definition file that will be committed to the <strong>mrnickel/homebrew-mrnickel</strong> repo.</li>
<li>Edit the information as appropriate in the definition. Setting the <strong>desc, homepage, url</strong></li>
<li>Copy the file from <code>$(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula</code> directory,  to the <strong>homebrew-mrnickel</strong> git directory.</li>
<li>Commit and push to the <strong>mrnickel/homebrew-mrnickel</strong> repository</li>
<li>Run <code>brew tap mrnickel/mrnickel</code></li>
<li>Run <code>brew install StaticSiteGenerator</code></li>
</ol>

<h2>Conclusion</h2>

<p>After some trial and error I came up with a suitable <a href="https://github.com/mrnickel/homebrew-mrnickel/blob/main/staticsitegenerator.rb">homebrew formula</a>.</p>

<p>I&rsquo;ve used Homebrew for many many years now. I&rsquo;ve never fully understood how it works, just that it works. It was interesting to dive into it a bit deeper. They&rsquo;ve done an excellent job with their documentation, and it&rsquo;s a well thought out package manager. I suppose that&rsquo;s why it&rsquo;s essentially the default package manager for MacOS.</p>

<p>I spent far too much time googling for ways to create the formula file, and I should have instead have just relied on the <code>brew help</code> and <code>brew create help</code> documentation as it&rsquo;s well represented. If only more software took as much pride in their docs as Homebrew does.</p>

<p>One thing I wish they would add would be a way to specify the path of the generated .rb file.</p>

<p>Now that I&rsquo;ve set up this homebrew tap, I can add this to some machine provisioning scripts I&rsquo;ve been meaning to write. Perhaps an article for another day. That along with some dotfiles that I should persist.</p>

				]]>
			</description>
			<pubDate>Fri, 13 Jan 2023 12:19:42 EST</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/creating_homebrew_package_for_staticsitegenerator_distribution.html</guid>
		</item>
	
		<item>
			<title>On Adding GZip Compression To StaticSiteGenerator</title>
			<link>http://RyanNickel.com/html/on_adding_gzip_compression_to_staticsitegenerator.html</link>
			<description>
				<![CDATA[
					<p>In an attempt to be a Good Web Citizen, I thought I&rsquo;d try to add some GZip compression to the responses served up by the <a href="https://github.com/mrnickel/StaticSiteGenerator">StaticSiteGenerator</a>.</p>

<p>What kind of performance increases will I get from this? Likely very little as my site is incredibly basic.</p>

<p>Who&rsquo;s asking for this update? Absolutely no one.</p>

<p>Why am I doing it? Curiosity.</p>

<h2>Question 1: Performance Increase?</h2>

<p>I&rsquo;m assuming there will be little to none. The site is essentially 99% text based. The other 1% would be the few images served up.</p>

<ul>
<li>Non GZipped: 169kb transfered</li>
<li>GZipped: 54.8kb transferred</li>
</ul>

<p>Roughly a third less transferred to the client. I guess my assumption above was incorrect!</p>

<h2>Question 2: How Complicated Would This Be?</h2>

<p>Go is a very well thought out language purpose built for creating web applications. My assumption here is that it would be very straight forward.</p>

<p>As I&rsquo;m by no means an effective Go programmer, and my experience is very limited with the language, I did what any developer would do: Google it.</p>

<p>I found a few examples that relied on 3rd party packages to solve the problem, but as I always try to limit my reliance on others packages, I continued until I found something that relied solely on the <a href="https://pkg.go.dev/std">Go stdlib</a>. I found <a href="https://gist.github.com/bryfry/09a650eb8aac0fb76c24">this example</a> by <a href="https://github.com/bryfry">bryfry</a>, plugged it in and it worked instantly.</p>

<h1>Conclusion</h1>

<p>This was a fun little experiment. It was refreshing to dip my toes back into Go again, and dust off the knowledge a bit.</p>

<p>Go&rsquo;s middleware design pattern is incredibly effective allowing for an elegant plug-n-play solution.</p>

<p>I was suitably impressed with the performance gains of adding just a few lines of code. A third of the file size is enough to ensure that I definitely use this on all my other projects.</p>

<p>I also always find it satisfying to work towards being a Good Web Citizen. No sense in adding more unnecessary bandwidth to the internet.</p>

				]]>
			</description>
			<pubDate>Wed, 04 Jan 2023 10:42:53 EST</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_adding_gzip_compression_to_staticsitegenerator.html</guid>
		</item>
	
		<item>
			<title>On Adding GitHub Actions To My StaticSiteGenerator</title>
			<link>http://RyanNickel.com/html/on_adding_github_actions_to_my_staticsitegenerator.html</link>
			<description>
				<![CDATA[
					<p>A number of years ago I started toying with <a href="https://go.dev">Go</a>. At the same time I was building this website you&rsquo;re reading right now. I wanted to join these two desires, so I thought I&rsquo;d take advantage of the, new to me, static site hosting of github for my personal website.</p>

<p>I love learning new programming languages. I find that even if I don&rsquo;t use them in my day-to-day there&rsquo;s always a new paradigm that can be applied to whatever language I use as my daily driver.</p>

<p>My big takeaway from Go was to <em>always</em> handle your errors, and to <em>always</em> make your errors explicit. Handling errors appropriately is a difficult thing to do. Do you retry? How many times? Does it make sense to simply retry? In what context do you retry? Do you simply bubble the error up to the user and have them address the errors? How many different kinds of errors can be returned? Errors and edge cases are the Hard Part of programming, and handling these appropriately separates a Good Developer from a Bad Developer.</p>

<p>As an aside, when working with clients, I spend an inordinate amount of time trying to highlight and solution all of the possible edge cases. Somtimes they&rsquo;re edge cases that are incredibly unlikely to happen, however it&rsquo;s always good to highlight everything that could pontentially go wrong and how to deal with said issues.</p>

<p>I build the <a href="https://github.com/mrnickel/StaticSiteGenerator">StaticSiteGenerator</a> as a way to play with Go, and to also tie that in with my attempt to statically host a site on <a href="https://pages.github.com/">GitHub Pages</a>.</p>

<p>I maintain enough servers daily, so the idea of maintaining another one for my personal site didn&rsquo;t appeal to me. Also, static site generators were all the rage, so why not jump on that band wagon?</p>

<p>Anyway, I built the <a href="https://github.com/mrnickel/StaticSiteGenerator">StaticSiteGenerator</a>, which has been meeting my needs. The application has been running for me just fine, and my last commit was in 2018. If it ain&rsquo;t broke don&rsquo;t fix it.</p>

<p>More recently I thought to myself, why not set up some CI/CD to automatically publish this software as a release to GitHub so I can easily pull it down to any of my machines to author a new post. No longer will I have to download the github repo, build it locally and set up aliases in my <code>.zprofile</code>. I can simply install the Go module and be on my way.</p>

<p>I originally thought all I&rsquo;d have to do is create a github workflow to build and release it, however this is when I discovered that my app was a little outdated. Go had moved on from where I was. I had to quickly sort out their new module interfaces.</p>

<p>Thankfully it wasn&rsquo;t too arduous.</p>

<p>Previously I&rsquo;d simply <code>go build</code> and take the generated binary and be off to the races.</p>

<p>Now it seems that go has these <em>modules</em>, which is Go&rsquo;s new way of managing Dependencies.</p>

<p>I added the <code>go.mod</code> file which is sort of like <code>npm</code>&rsquo;s <code>package.json</code> file. Outlining all 3rd party dependencies, and I was back to building again.</p>

<h2>Publish Binary To GitHub Release</h2>

<p>Setting up the GitHub Action to publish the SimpleSiteGenerator was pretty straight forwrd.</p>

<ol>
<li>Add a <code>build.yml</code> file to the <code>.github/workflows</code> directory</li>
</ol>

<h2>Build.yml</h2>

<pre><code>name: Go

on:
  push:
    branches:
      - &quot;!*&quot;
    tags:
      - &quot;v*.*.*&quot;

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v4
      with:
        args: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
</code></pre>

<p>Fairly minimal. Whenever a tag is created in the format of <strong>vX.X.X</strong> the action will kick off, build the binary and upload it as a release.</p>

<p>Alright, now that we have a package that we can <code>go install</code>, I can get to running things locally.</p>

<h2>Install StaticSiteGenerator Locally</h2>

<p>I want to do this in order to ensure that it will work remotely.</p>

<p><code>go install github.com/mrnickel/StaticSiteGenerator@latest</code>
<code>echo alias ssg='StaticSiteGenerator &gt;&gt; ~/.zprofile</code>
<code>ssg</code></p>

<p>This should now print out the actions of the StaticSiteGenerator.</p>

<h1>Conclusion</h1>

<p>Lately I&rsquo;ve been working primarily with TypeScript/JavaScript. Jumping back into Go is a nice breath of fresh air. It&rsquo;s so lightweight, doesn&rsquo;t require all sorts of build systems and bundlers. It <strong>just works</strong>.</p>

<p>Next up I think I&rsquo;ll look into adding this as a <a href="https://brew.sh/">HomeBrew</a> package.</p>

				]]>
			</description>
			<pubDate>Mon, 02 Jan 2023 20:26:18 EST</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_adding_github_actions_to_my_staticsitegenerator.html</guid>
		</item>
	
		<item>
			<title>On Open Source Trolls</title>
			<link>http://RyanNickel.com/html/on_open_source_trolls.html</link>
			<description>
				<![CDATA[
					<p>We all use open source projects to complete our daily jobs. We all stand on the shoulders of giants. However it seems as though there are many who take the hard work of others for granted. They&rsquo;ve come to expect enterprise level support and stability from projects that are given away for free from generous people.</p>

<p>Since I&rsquo;ve started developing with React Native/JS, I&rsquo;ve begun to actually contribute back to some of the projects that I use. Not nearly enough, but something is better than nothing.</p>

<p>As my involvement in the community has increased, so too has my empathy towards those who manage these heavily used projects.</p>

<p>I understand why people may feel frustrated when updates to their dependencies introduce regressions, but why this sense of entitlement? These regressions are never intentional, and breaking changes are generally well communicated especially with large projects such as ReactJS / ReactNative.</p>

<p>There will always be edge cases that the team simply can&rsquo;t account for. ReactJS in general is downloaded millions of times each week. The distribution is so large that introducing bugs is inevitable.</p>

<p>Bug reports are incredibly valuable, but comments such as:</p>

<blockquote>
<p>Yeah &hellip; RN is so instable &hellip; RN dev spend more time fixing bugs than properly coding</p>
</blockquote>

<p>or</p>

<blockquote>
<p>I hate React Native now. The basic functionality is not working what the worst team, don&rsquo;t you know test before release?</p>
</blockquote>

<p>This type of response/comment is not helpful to anyone. Instead, letâ€™s try to positively articulate our experience when we issue bug fixes and circumvent negative comments. Letâ€™s not forget that there is a person on the receiving end of these harsh comments.</p>

<p>We need to focus on the issue at hand, offer helpful suggestions to the best of our ability, and if possible offer a code repo / sandbox that duplicates the issue. These are solutions that will benefit others who have the curiosity to learn.</p>

<p>See this post on on <a href="https://www.softwaretestinghelp.com/how-to-write-good-bug-report/">how to write helpful bug reports</a></p>

<p>Here are a few items that I believe are of utmost significance:</p>

<blockquote>
<p><strong>Donâ€™t assume</strong> that the developer has made a mistake and hence you can use harsh words. Before reporting, it is equally important to check if the same bug has been reported or not.</p>
</blockquote>

<p>and</p>

<blockquote>
<p><strong>A duplicate bug</strong> is a burden in the testing cycle. Check the whole list of known bugs. At times, the developers might have known the issue and ignored it for a future release. Tools like Bugzilla which automatically searches for duplicate bugs can also be used. However, it is best to manually search for any duplicate bug.</p>
</blockquote>

<p>In the current world we live in, we need to recognize the developers that are  giving away their work to help you improve  so let&rsquo;s pay it forward and show them the respect and appreciation warranted.</p>

				]]>
			</description>
			<pubDate>Wed, 22 Apr 2020 20:11:52 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_open_source_trolls.html</guid>
		</item>
	
		<item>
			<title>On Getting AWS Solutions Architect Certified</title>
			<link>http://RyanNickel.com/html/on_getting_aws_solutions_architect_certified.html</link>
			<description>
				<![CDATA[
					<p>Having accomplished my personal challenge of completing an olympic triathlon (while simultaneously rediscovering my love of cycling), I decided to tackle a professional challenge.</p>

<p>So I went in search of something new.</p>

<p>At the time, my team was  knee-deep in a lift and shift of our platform from MediaTemple to AWS. The process was going very smoothly and I found myself  intrigued by the number of overwhelming-yet-fascinating services they offer.</p>

<p>An abundance of shiny new tools to  take our platform to the next level. I was hooked!  The search was over.  My professional challenge was to get my Solutions Architect Certification on AWS.</p>

<h2>THE PREPARATION</h2>

<h3>Online Course</h3>

<p>Just like anything new, I had to do my research and gather learning resources.</p>

<p>Amazon offered a number of white papers on the subject, but I found them to be too dry for my liking. I generally prefer to get my hands dirty and at least see some live examples.</p>

<p>This led me to Pluralsightâ€™s <a href="https://www.pluralsight.com/courses/aws-certified-solutions-architect-associate">AWS Certified Solutions Architect - Associate</a> course by <a href="https://twitter.com/ekhnaser">Elias Khnaser</a>. Other than the disappointment of marginally dated content, it was an overall solid course that allowed me to wrap my head around the networking and IAM concepts to help me improve the overall security of our platform.</p>

<h3>Linux Academy</h3>

<p>I also played around with <a href="https://linuxacademy.com/">Linux Academy</a> as I was captivated  by the prospect of working through exercises on a live AWS account and having my solution verified. However, at the time the platform was quite new and the results were inconsistent and quite often incorrect.</p>

<p>I wish I could recall more details as to what my issues were but this was a long time ago and I&rsquo;m certain the platform has gotten much better. I&rsquo;d be curious to try it again when I decide to get another certification.</p>

<h3>Study Guide</h3>

<p>The final piece of learning material I picked up was the official <a href="https://www.amazon.ca/Certified-Solutions-Architect-Study-Guide/dp/111950421X/ref=sr_1_1?keywords=solutions+architect+study+guide&amp;qid=1580314684&amp;sr=8-1">AWS Certified Solutions Architect Study Guide</a>. It should come as no surprise that this book covered everything that one would be tested on. It was  valuable at presenting the various concepts and topics and offered some  fundamental study materials.</p>

<h3>Practical Application</h3>

<p>Now that I had the learning materials, I wanted to apply best practices and gain practical experience before I wrote the exam.</p>

<p>Some of the goals I wanted to achieve with this were:</p>

<ul>
<li>Secure networking</li>
<li>Secure IAM roles and security groups</li>
<li>Autoscaling</li>
<li>Reduce costs</li>
</ul>

<p>As I don&rsquo;t have a background in networking, that was the part I struggled with the most (Well&hellip; that and IAM). At the beginning I was excited just to get things up and running so my security groups weren&rsquo;t exactly up to snuff. Open to too many services and external network attacks. RDS was the biggest culprit for this as I was used to opening up my SQL app and connecting directly to it in order to debug any issues. I had contemplated setting up a VPN but considering one of my goals was to reduce costs I settled on locking down requests to my own IP address. As our platform was quite stable this was acceptable. If I or my team were connecting regularly I would have set up the VPN.</p>

<p>Setting up proper networking was a hurdle for me. As the <a href="https://Volu.me">Volu.me</a> back end grew organically into a monolith, networking was never a thing I had to think about. It&rsquo;s easy to build and deploy a single codebase to a single server when everything is synchronous and request based. However as soon as your platform needs to scale you need to start thinking about being more reactive and asynchronous. This means at the very least running on difference processes, which quickly leads to overburdening a single machine. In the short term this can be mitigated by increasing the size of your EC2 instance, but this is obviously not sustainable. Best practice dictates to use multiple smaller EC2 instances which means putting more thought into networking. My goal was to only have two services publically available: S3 and our ELB. Our system was essentially a monolith with a number of cron jobs running as services so networking was pretty straight forward. I could go into more technical detail about our solution, but that would be better left to another blog post.</p>

<p>My next hurdle was properly setting up IAM across our system. Again, because our system was essentially a monolith that was now distributed it gave me a good opportunity to ideally have services split up. I created the appropriate IAM accounts with the ideal microservice setup that we were aiming for and after some stressful afternoons we got everything running.</p>

<h2>THE DEEP BREATH</h2>

<p>Now that I had some practical experience setting up a non-trivial system on AWS following best practice I had one last hurdle to jump: My negative internal dialog constantly telling me that I wasn&rsquo;t ready.</p>

<p>I hadn&rsquo;t written any tests in 10+ years! How would I know if I&rsquo;ve prepared enough? How do I know if I&rsquo;m really ready? I spent far too much time procrastinating by convincing myself that I wasn&rsquo;t prepared.</p>

<p>After months of putting it off I dug my heels in, logged into the portal and booked a date.  There was no turning back. I told myself that I wasn&rsquo;t going to reschedule no matter what. I then did what I always do just before tests and crammed the entire week prior. Ran through all of the practice exams, exercises and anything else I could find.</p>

<p>The night before the exam, I couldnâ€™t focus on anything else.  My palms were sweaty, knees weak, arms were heavyâ€¦</p>

<h2>THE EXAM</h2>

<p>The day of the exam came and that familiar fluttering feeling in my stomach returned.</p>

<p>I went through the test and I realized that as per usual I had over-prepared. In retrospect If it wasnâ€™t for my fear,  I could have written the test months earlier.</p>

<p>To my relief, I passed the test and was very thankful that I got the results instantly.</p>

<h2>THE CONCLUSION</h2>

<p>Although the <a href="https://Volu.me">Volu.me</a> (my company) platform has since been taken down, I am still an avid user of AWS and always recommend it to clients.</p>

<p>I am concerned about vendor lockin, and to some extent it is unavoidable, but it can be mitigated with some effort&hellip; but again that is another blog post for another day.</p>

<p>There it is; I tackled my professional challenge. I think my next personal (physical) challenge this year will either be learning to fly-fish, or run a full marathon Maybe both!</p>

				]]>
			</description>
			<pubDate>Wed, 25 Mar 2020 16:06:17 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_getting_aws_solutions_architect_certified.html</guid>
		</item>
	
		<item>
			<title>My Thoughts on WWDC 2019</title>
			<link>http://RyanNickel.com/html/my_thoughts_on_wwdc_2019.html</link>
			<description>
				<![CDATA[
					<p>WWDC is an event I&rsquo;ve been watching every year since I think 2007, the year they announced the iPhone. At the time I was a big Apple fanboy.</p>

<p>I bought my first iBook which I believe was the 2002 model. I can&rsquo;t be sure. I was in University and it cost me more money than I had, but I had
never been so satisfied with a computer in my life. As Marie Kondo would say, it sparked joy. Our computer lab had macs, but they were running
Mac OS 9. The OS made no sense to me. I came from a Windows world, and although I was very comfortable with that, OS 9 to me always felt clunky
and unintuitive.</p>

<p>Never would I buy a Mac, I told myself&hellip; even though the hardware was fun and always boasted more up-to-date technology, I just couldn&rsquo;t get
past the OS.</p>

<p>Then a friend of mine brought his Powerbook over running OS X. It immediately changed my mind. That machine was a revelation to me. &ldquo;Holy shit!&rdquo; I said,
&ldquo;This is a Mac??&rdquo;. &ldquo;Yes&rdquo;, he replied. &ldquo;This is a Mac.&rdquo;.</p>

<p>I went out a few weeks later and bought the iBook. Every device they released after that I felt the same reverence for:</p>

<ul>
<li>iPod</li>
<li>iPod video</li>
<li>iPhone</li>
<li>iPad</li>
<li>Apple TV</li>
</ul>

<p>All of them brought joy to my life. I dutifully upgraded my Apple devices throughout the years.</p>

<p>I&rsquo;ve owned iBooks, MacMini&rsquo;s, MacBooks, MacBook Airs and now MacBook Pros. I&rsquo;ve been running the Pro series for the last 5+ years. I&rsquo;ve owned basically every
generation of iPhone to date (I <em>am</em> an iOS developer after all), and various iPads. You name it, I&rsquo;ve bought it.</p>

<p>I also continued to watch WWDC year after year soaking up all the SDK updates for OS X, then for iOS. Objective C was never my language of choice, but
I used it, and grew to appreciate all the square brackets. It wasn&rsquo;t until the announcement of Swift that I realized my appreciation for the spacing
in ObjC was more stokcholme syndrome.</p>

<p>Over the years, I must admit I became more and more discouraged with the direction Apple was taking for their products.</p>

<p>The hardware wasn&rsquo;t really pushing the envelope, the build quality of both the hardware and software seemed to be suffering. All the new features brought
to iOS seemed a lot like &ldquo;me too&rdquo; features, years after Android (or even BlackBerry) had released them.</p>

<p>Not to mention the plethora of issues with their latest keyboard.</p>

<p>WWDC 2019 however has me excited for the first time in years. They announced a number of things that have me excited.</p>

<h2>SwiftUI</h2>

<p>Using swift within UIKit has always seemed a bit clunky.</p>

<p>The introduction of SwiftUI seems to address this in a big way, and I&rsquo;m sure it&rsquo;s the direction Apple will be moving in going into the future.</p>

<p>A quick glance at the declaritive style of reminds me very much of how you go about declaring your UI in React Native. A style that is very easy to understand.</p>

<p>And the new design tools look incredible as well. No longer having to recompile the app in order to see if moving your component 3 points to the left is what you want
is going to be a big game changer for a lot of developers. This is going to get XCode one step closer to the design experience of Anroid Studio, or StoryBooks in RN.</p>

<h2>iPad OS</h2>

<p>With regards to the iPad, it always felt to me like a missed opportunity. It was always treated as just a big iPhone. The device turned into a convenient
way for me to watch Netflix on the go.</p>

<p>I&rsquo;ve always wanted to use it to write my notes, but the lag on any of the 3rd party stylus&rsquo; have always been too long. The Pencil is much better, but still not quite fast enough for me to jot down a small note while working.</p>

<p>However this year they are finally starting to use the plethora of screen realestate. Allowing multiple apps to move around, decreased the Pencil lag to 9ms!
That&rsquo;s crazy! At 9ms I think I&rsquo;ll be able to finally realize my dream of going fully paperless!</p>

<p>And my most anticipated feature: Sidecar. Yes! Finally allowing me to extend my MacBook Pro&rsquo;s screen to a second monitor when I&rsquo;m on the go (I&rsquo;m on the go a lot).</p>

<h2>Catalina</h2>

<p>No more iTunes. I mean I don&rsquo;t think I can add any more to this.</p>

<p>Sidecar (again)</p>

<p>More security. I really appreciate the stance Apple is making on security. Bringing it front and centre, and making it secure by default.</p>

				]]>
			</description>
			<pubDate>Sat, 20 Jul 2019 18:06:25 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/my_thoughts_on_wwdc_2019.html</guid>
		</item>
	
		<item>
			<title>Creating My Ideal React Native Projects With TypeScript ESLint, Prettier and VSCode</title>
			<link>http://RyanNickel.com/html/creating_my_ideal_react_native_projects_with_typescript_eslint,_prettier_and_vscode.html</link>
			<description>
				<![CDATA[
					<p>With the <a href="https://medium.com/palantir/tslint-in-2019-1a144c2317a9">announcement of TSLint being deprecated in favour of using ESLint</a>
I thought it was a good opportunity to set up a template project with my five required features on any React Native project I start. Namely:</p>

<ol>
<li>Writing in TypeScript with proper linting</li>
<li>Utilize Prettier to automatically fix code styles</li>
<li>Set up VSCode for live linting</li>
<li>Set up VSCode to properly format using Prettier config on save</li>
<li>Resolve imports from the root instead of relatively (i.e. no <code>import x from '../../../x';</code>)</li>
</ol>

<p>This post is really more for myself as a reminder on what is required to meet the above conditions. As I learn more I&rsquo;ll update this post.</p>

<p>This took me <em>far</em> longer than I had originally anticipated. Although I&rsquo;m not new to React Native, I am new to some of the more advanced
JavaScript tooling.</p>

<p>I won&rsquo;t go through all of the things that I tried and <em>didn&rsquo;t</em> work, as there were far too many of them and I can&rsquo;t fully recall the number of hoops
I tried to jump through before realizing they were the wrong hoop to begin with. (note to self: I should document my processes <em>as</em> they&rsquo;re happening,
instead of after the fact).</p>

<p>Let&rsquo;s walk through the process of creating an entirely new React Native TypeScript project, then set up the project to address the 5 requirements outlined
above.</p>

<p>Thankfully the process of adding TypeScript to the RN projects has been greatly simplified. Let&rsquo;s stick with the React Native convention and create a new
project <strong>MyAwesomeProject</strong></p>

<pre><code>$ react-native init MyAwesomeProject --template typescript
</code></pre>

<p>Done. We&rsquo;re running on TypeScript. Huzzah!</p>

<p>Now let&rsquo;s set up the recommended VSCode extensions so we can verify the linting rules as we do everything:</p>

<pre><code>$ cd MyAwesomeProject
$ mkdir .vscode &amp;&amp; cd .vscode
$ touch extensions.json
$ touch settings.json
$ cd ..
$ mkdir src
$ code .
</code></pre>

<p>This will create the .vscode project folder and open up the project.</p>

<p>I prefer to keep my folder structure as follows:</p>

<pre><code>MyAwesomeProject
|____tests__/
|__.vscode/
|__android/
|__ios/
|__src/
|  |__components/ // general components shared throughout the codebase
|  |__scenes/ // full screen sections
|  |  App.tsx
|
|  .bablerc.js
|  ...
|  etc
|  ...
</code></pre>

<p>This will become important when specifying the root paths in <code>tsconfig.json</code> and <code>.babelrc.js</code>.</p>

<p>Let&rsquo;s update the <code>extensions.json</code> file as below:</p>

<h2>./vscode/extensions.json</h2>

<pre><code>{
  &quot;recommendations&quot;: [
    &quot;dbaeumer.vscode-eslint&quot;,
    &quot;esbenp.prettier-vscode&quot;
  ]
}
</code></pre>

<p>Now we can make sure that everyone opening this project will use the same default extensions and have the same consistent tooling.</p>

<p>Now it&rsquo;s time to start adding the various dependencies:</p>

<p>Open up the VSCode terminal by pressing <code>CTRL +</code>`.</p>

<p>Let&rsquo;s start adding some dependencies:</p>

<pre><code>$ yarn add --dev     @typescript-eslint/eslint-plugin \
  @typescript-eslint/parser \
  babel-eslint \
  babel-plugin-module-resolver \
  eslint \
  eslint-config-airbnb \
  eslint-config-prettier \
  eslint-config-react \
  eslint-import-resolver-babel-module \
  eslint-import-resolver-typescript \
  eslint-plugin-import \
  eslint-plugin-jsx-a11y \
  eslint-plugin-module-resolver \
  eslint-plugin-prettier \
  eslint-plugin-react \
  prettier \
  react-native-typescript-transformer \
</code></pre>

<p>Phew! That&rsquo;s a lot of dependencies. Welcome to JavaScript I guess!</p>

<p>Note: I prefer to use the default Airbnb rules. (side note: Want to learn more about JavaScript eccentricities? Read the <a href="https://github.com/airbnb/javascript">Airbnb JavaScript style guide</a>)</p>

<p>Finally, let&rsquo;s modify a few config files.</p>

<h2>./vscode/settings.json</h2>

<pre><code>{
  &quot;search.exclude&quot;: {
    &quot;ios/build&quot;: true,
    &quot;android/app/build&quot;: true,
  },
  &quot;editor.formatOnSave&quot;: false,
  &quot;editor.trimAutoWhitespace&quot;: true,
  &quot;editor.tabSize&quot;: 2,
  &quot;editor.rulers&quot;: [
    150
  ],
  &quot;eslint.autoFixOnSave&quot;: true,
  &quot;eslint.validate&quot;: [
    {
      &quot;language&quot;: &quot;javascript&quot;,
      &quot;autoFix&quot;: true
    },
    {
      &quot;language&quot;: &quot;javascriptreact&quot;,
      &quot;autoFix&quot;: true
    },
    {
      &quot;language&quot;: &quot;typescript&quot;,
      &quot;autoFix&quot;: true
    },
    {
      &quot;language&quot;: &quot;typescriptreact&quot;,
      &quot;autoFix&quot;: true
    }
  ],
  &quot;files.exclude&quot;: {
    &quot;**/node_modules&quot;: true,
    &quot;**/android/app/build&quot;: true,
    &quot;**/ios/build&quot;: true
  },
  &quot;files.insertFinalNewline&quot;: true,
}
</code></pre>

<h2>.eslintignore</h2>

<pre><code>src/registerServiceWorker.js
src/**/__tests__/**
babel.config.js
index.js
node_modules/**
ios/**
android/**
</code></pre>

<h2>.eslint.js</h2>

<pre><code>module.exports = {
  &quot;parser&quot;: &quot;@typescript-eslint/parser&quot;,
  &quot;plugins&quot;: [
    &quot;@typescript-eslint&quot;,
    &quot;prettier&quot;,
    &quot;import&quot;,
    &quot;module-resolver&quot;
  ],
  &quot;extends&quot;: [
    &quot;airbnb&quot;,
    &quot;plugin:@typescript-eslint/recommended&quot;,
    &quot;plugin:import/typescript&quot;,
    &quot;plugin:react/recommended&quot;,
    &quot;plugin:import/recommended&quot;,
    &quot;prettier&quot;,
    &quot;prettier/@typescript-eslint&quot;,
    &quot;prettier/react&quot;
  ],
  &quot;env&quot;: {
    &quot;browser&quot;: true,
    &quot;jasmine&quot;: true,
    &quot;jest&quot;: true
  },
  &quot;rules&quot;: {
    &quot;prettier/prettier&quot;: [&quot;error&quot;],
    &quot;@typescript-eslint/explicit-member-accessibility&quot;: 0,
    &quot;@typescript-eslint/no-empty-interface&quot;: 0,
    &quot;@typescript-eslint/explicit-function-return-type&quot;: 0,
    &quot;@typescript-eslint/no-non-null-assertion&quot;: 0,
    &quot;@typescript-eslint/no-use-before-define&quot;: 0,
    &quot;no-use-before-define&quot;: 0,
    &quot;@typescript-eslint/indent&quot;: [&quot;error&quot;, 2],
    &quot;max-len&quot;: [&quot;error&quot;, 150],
    &quot;react/jsx-filename-extension&quot;: [1, { &quot;extensions&quot;: [&quot;.jsx&quot;, &quot;.tsx&quot;] }],
    &quot;object-curly-newline&quot;: [&quot;error&quot;, { &quot;ImportDeclaration&quot;: &quot;never&quot; }],
    &quot;@typescript-eslint/interface-name-prefix&quot;: 0,
    &quot;class-methods-use-this&quot;: 0,
    &quot;no-unused-vars&quot;: 0,
    &quot;@typescript-eslint/no-unused-vars&quot;: [&quot;error&quot;, { &quot;argsIgnorePattern&quot;: &quot;^_[0-9]?&quot; }],
    &quot;react/display-name&quot;: 0,
    &quot;react/prop-types&quot;: 0, // not necessary as we use typescript
    &quot;object-curly-newline&quot;: 0,

  },
  &quot;settings&quot;: {
    &quot;import/resolver&quot;: {
      &quot;babel-module&quot;: {},
      &quot;typescript&quot;: {}
    }
  },
  &quot;globals&quot;: {
    &quot;__DEV__&quot;: true
  }
}
</code></pre>

<p>Note I prefer the js extension so I can add inline comments.</p>

<h2>.prettierrc.js</h2>

<pre><code>module.exports = {
  &quot;tabWidth&quot;: 2,
  &quot;semi&quot;: true,
  &quot;singleQuote&quot;: true,
  &quot;trailingComma&quot;: &quot;all&quot;,
  &quot;printWidth&quot;: 150,
  &quot;bracketSpacing&quot;: true
};
</code></pre>

<h2>.babelrc.js</h2>

<pre><code>module.exports = {
  presets: [
    'module:metro-react-native-babel-preset'
  ],
  plugins: [
    ['module-resolver',
      {
        extensions: [
          '.js',
          '.jsx',
          '.ts',
          '.tsx'
        ],
        root: [&quot;./src&quot;],
        alias: {
          &quot;resources&quot;: &quot;./resources&quot;
        }
      }
    ]
  ]
};
</code></pre>

<p>Note: I prefer to use the name <code>.bablerc.js</code> to stick with the other config file naming conventions.</p>

<h2>tsconfig.json</h2>

<pre><code>{
  &quot;compilerOptions&quot;: {
    &quot;allowJs&quot;: true,
    &quot;allowSyntheticDefaultImports&quot;: true,
    &quot;esModuleInterop&quot;: true,
    &quot;isolatedModules&quot;: true,
    &quot;jsx&quot;: &quot;react&quot;,
    &quot;lib&quot;: [
      &quot;es6&quot;
    ],
    &quot;module&quot;: &quot;es2015&quot;,
    &quot;moduleResolution&quot;: &quot;node&quot;,
    &quot;noEmit&quot;: true,
    &quot;strict&quot;: true,
    &quot;target&quot;: &quot;esnext&quot;,
    &quot;baseUrl&quot;: &quot;./src&quot;,
    &quot;rootDir&quot;: &quot;./src&quot;,
    &quot;resolveJsonModule&quot;: true
  },
  &quot;exclude&quot;: [
    &quot;node_modules&quot;,
    &quot;babel.config.js&quot;,
    &quot;metro.config.js&quot;,
    &quot;jest.config.js&quot;
  ]
}
</code></pre>

<p>That&rsquo;s about it. Now get started writing your next world-changing app with sane defaults.</p>

<p>I&rsquo;ve created a <a href="https://github.com/mrnickel/ReactNativeTypeScriptConfigDemo">demo project on GitHub</a>. If you have any recommendations on how I can make this better please feel free to submit a PR!</p>

				]]>
			</description>
			<pubDate>Tue, 04 Jun 2019 15:41:58 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/creating_my_ideal_react_native_projects_with_typescript_eslint,_prettier_and_vscode.html</guid>
		</item>
	
		<item>
			<title>Rendering dynamic components with React Native and the performance implications</title>
			<link>http://RyanNickel.com/html/rendering_dynamic_components_with_react_native_and_the_performance_implications.html</link>
			<description>
				<![CDATA[
					<p>I am currently working on a project that cries out for flexibility and dynamic functionality. Different builds require slightly different UI.
Thankfully the same actions and business logic apply.</p>

<p>My concern:</p>

<p>Because all builds are branched off of the same master branch, and each build could have slightly different UI any upstream bug fixes could
potentially overwrite existing UI or cause conflicts. Both issues I would like to try to avoid.</p>

<p>I wanted to accomplish the above for developer frendliness while alsp keeping the app as performant as possible.</p>

<p>Aside: Generally when creating an app you want to aim for 60 frames per second. This means that the render time goal is 16ms or less.</p>

<p>My solution:
Because my React Native app runs on Redux I could leverage the container / dumb component design pattern to ensure that no potential business
logic was lost. I could also use this to potentially swap out the UI component based on a builds configuration.</p>

<p>i.e. The container would <code>connect</code> all the appropriate props and dispatch actions, then <code>render</code> the appropriate component for the build.</p>

<p>Step 1:
First I wanted to verify that it was possible to import a component outside of the standard <code>import component from ...</code> syntax with the
<code>require</code> syntax, so that I could then verify that my desired pattern was even a possibility.</p>

<p>Assumption: Totally possible</p>

<pre><code>render() {
  const listItemRowComponent = require('src/components/ListItemRowComponent1.tsx')
  return (&lt;listItemRowComponent prop1={'value1'} prop2={'value2} /&gt;)
}
</code></pre>

<p>Step 2:
I refreshed my screen, and success! It worked! Whenever implementing a new pattern I always try to measure the performance implications.</p>

<p>Now what?
The question I wanted to answer was what are the performance implications of requiring this component every time instead of simply importing
it at the top of my class component.</p>

<p>Step 3:
Now I wanted to do was establish a performance baseline. How many milliseconds on average would it take to render my component when doing
a standard <code>import</code>?</p>

<p>Step 4:
So I fired up Google Chrome&rsquo;s peformance tool, started the recording, navigated to the screen, waited for the load and scrolled down a bit.</p>

<p>I then investigated the results:</p>

<p><img src="/images/base_line.png" alt="Baseline" title="Baseline" /></p>

<p>At a glance, it looks as though the average rendering time is about 7ish ms. Fantastic! Under that desired 16ms we aim for.</p>

<p>I wonder what the <a href="https://facebook.github.io/react-native/docs/performance#what-you-need-to-know-about-frames">React Native Perf Monitor</a> showed as well with regards to RAM usage and UI vs JS frames per second.</p>

<p>Before loading the list: 137ish MB, with 60 / 60 FPS.</p>

<p>Navigate to the List, load the 500 rows:</p>

<ul>
<li>Ram goes up to: 158ish MB</li>
<li>with scrolling, I see the UI thread go down to 58, but the JS stays consistent at 60. Great!</li>
</ul>

<p>Step 5:
I then implemented the above <code>render()</code> function to see what, if any, performance implications</p>

<p>Assumption: I won&rsquo;t see any dramatic differences.</p>

<p><img src="/images/require_all_the_time.png" alt="Require All The Time" title="Require all the time" /></p>

<p>There was a slight increase with this new method, but not dramatically so. I would say that it&rsquo;s acceptable.</p>

<p>One thing that I did notice however was that the Perf Monitor showed that the RAM usage went from about 158ish MB to 172ish MB. Not substantial, but not insigificant either.</p>

<p>Now I have two questions:</p>

<ol>
<li>Obviously just requiring from a static string is no more flexible than doing an <code>import</code> from the top of the file. Can I use a variable?</li>
<li>Can I get that memory usage back down?</li>
</ol>

<p>The answer to the first question seems pretty obvious at first blush.</p>

<p>Simply add a configuration property and reference it.</p>

<pre><code>// config.ts
export default {
  listItemRowComponent: 'src/components/ListItemRowComponent1.tsx'
}

// component.ts
render() {
  const listItemRowComponent = require(config.listItemRowComponent)
  return (&lt;listItemRowComponent prop1={'value1'} prop2={'value2'} /&gt;)
}
</code></pre>

<p>Turns out RN isn&rsquo;t a big fan of this approach, and I got the Red Screen of Death.</p>

<p>Okay. I definitely wanted to be able to define which component to use in my config file. What do I do?</p>

<p>Step 6:
At this point I did what all developers do in this situation &ndash; I Googled. It then pointed me to this wonderful <a href="https://stackoverflow.com/questions/33907218/react-native-use-variable-for-image-file">StackOverflow</a> post.</p>

<p>Of course! Just <code>require</code> it directly into my config value:</p>

<pre><code class="language-config.ts">export default {
  listItemRowComponent: require('src/components/ListItemRowComponent1.tsx').default
}
</code></pre>

<p>Step 7:
Then simply render the <code>config.listItemRowComponent</code> as such:</p>

<pre><code class="language-component.ts">render() {
  return (&lt;config.listItemRowComponent prop1={'value1'} prop2={'value2'} /&gt;)
}
</code></pre>

<p>And it works! Awesome. This makes me happy. It&rsquo;s configurable, extendable and manageable. Great &lsquo;ables&rsquo; all around. And it&rsquo;s performant.</p>

<p>Taking a quick view of the performance snapshop I&rsquo;m seeing render times of roughly 9ms for the component when referenced as such.</p>

<p><img src="/images/require_config.png" alt="Require in config" title="Require in config" /></p>

<p>Perf Monitor is also reporting that my RAM usage is comparable to the standard <code>import component from ...</code> syntax.</p>

<p>Fantastic!</p>

<p>My conclusion:</p>

<p>One big downside to this pattern is that you lose the ability to quickly navigate to a UI components implementation within VS code, directly linking between
props and implementations.  You also lose the ability to refactor property types. Linters aren&rsquo;t going to catch any issues with the props either.
This could be an issue if you use these tools as crutches. I know that I rely heavily on the refactor abilities (naming things is not easy).</p>

<p>Note that perf monitor, and the Google Chrome Performance recording isn&rsquo;t exact. The app was tested while in DEV mode, which means that the performance
will be worse than in prodiction, however my thoughts are that if I can get the app running well without any React optimizations, when those are in place
the app will run even smoother.</p>

				]]>
			</description>
			<pubDate>Wed, 08 May 2019 09:59:01 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/rendering_dynamic_components_with_react_native_and_the_performance_implications.html</guid>
		</item>
	
		<item>
			<title>Migrating from 1Password to KeePassXC</title>
			<link>http://RyanNickel.com/html/migrating_from_1password_to_keepassxc.html</link>
			<description>
				<![CDATA[
					<p>I&rsquo;m a big proponent of password managers, and I&rsquo;ve been a heavy user of 1Password for a long time now. Several years ago, I purchased it for Mac, Windows, iOS and Android.</p>

<p>Fast forward to today and they&rsquo;ve updated to a subscription model, and they host the passwords online.</p>

<p>I completely understand their need to continue to generate revenue from existing customers in order to improve the product and as a software developer myself I sympathize with them. However I don&rsquo;t want to add yet another monthly subscription to my wallet.</p>

<p>On a security note, I&rsquo;m not so inclined to host my passwords on a 3rd party platform. I feel it&rsquo;s too big of a honey pot. I prefer to keep my important files offline. (I also don&rsquo;t support services like Dropbox for anything important). Especially seeing as services like LastPass <a href="https://www.pcworld.com/article/2936621/the-lastpass-security-breach-what-you-need-to-know-do-and-watch-out-for.html">have already been breached</a>.</p>

<p>While my current version of 1Password continues to work just fine across my devices, they&rsquo;re not actively improving the software, so I&rsquo;ve decided to try to find an open source alternative which hopefully I can help contribute to.</p>

<p>After some research, I stumbled across <a href="https://keepassxc.org/">KeePassXC</a> as recommended by <a href="https://ssd.eff.org/en/module/how-use-keepassxc">EFF</a> and thought I&rsquo;d give it a try.</p>

<p>The first hurdle I wanted to jump was getting my 1Password content into KeePassXC.</p>

<p>To do that:</p>

<ol>
<li>Open 1Password, log in, and select the vault (if on Mac).</li>
<li>File &gt; Export &gt; All Items. Enter your password.</li>
<li>Change the File Format to <strong>CSV</strong>. Leave everything else the same and press <strong>Save</strong></li>
<li>Open KeePassXC</li>
<li>Select <strong>Import from CSV</strong> and select the file you exported from 1Password</li>
<li>Create a password to unlock and select <strong>OK</strong></li>
<li>In the top section, select <strong>Consider &lsquo;\&rsquo; an escape character</strong></li>

<li><p>Set the following columns:</p>

<p>Group: <strong>Not present</strong></p>

<p>Title: <strong>Column 3</strong></p>

<p>Username: <strong>Column 6</strong></p>

<p>Password: <strong>Column 2</strong></p>

<p>URL: <strong>Column 5</strong></p>

<p>Notes: <strong>Column 1</strong></p>

<p>Last Modified: <strong>Not present</strong></p>

<p>Created: <strong>Not present</strong></p></li>

<li><p>Press <strong>OK</strong></p></li>
</ol>

<p>If your 1Password is like mine (littered with temporary passwords), you&rsquo;re definitely going to want to go through and clean up a bunch of entries after the import.</p>

<p>I&rsquo;m going to try to use this as my main password manager for the time being, but one shortcoming I&rsquo;ve come across so far is that it&rsquo;s difficult to enter credit card information for safe keeping.</p>

<p>KeePass has a template plugin system that can handle this, so hopefully KeePassXC can implement something similar.</p>

<p>Another good article worth mentioning to better acquaint you with the ins and outs of the software is posted by <a href="http://samschlinkert.com/">Sam Schlinkert</a> <a href="https://sts10.github.io/2017/06/27/keepassxc-setup-guide.html">Getting Started With KeePassXC</a></p>

				]]>
			</description>
			<pubDate>Wed, 02 Jan 2019 14:41:54 -0800</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/migrating_from_1password_to_keepassxc.html</guid>
		</item>
	
		<item>
			<title>On Deleting My Facebook Account</title>
			<link>http://RyanNickel.com/html/on_deleting_my_facebook_account.html</link>
			<description>
				<![CDATA[
					<p>I&rsquo;m deleting my Facebook account.</p>

<p>The last straw for me was the revelation that they <a href="https://techcrunch.com/2018/09/27/yes-facebook-is-using-your-2fa-phone-number-to-target-you-with-ads/">use your 2FA phone number to target you with ads</a>.</p>

<p>Over the years, as more and more stories were published on the grounds of fraud and breaches, I&rsquo;ve become ever more vigilant in adding 2FA to all of my accounts (preferring One-Time-Password generators over SMS, but c&rsquo;est a vie). Some time ago I logged into my FB account in order to add that extra layer of security. I gave them my phone number. Fast forward to the present and we find out that FB transparently uses my phone number for advertising purposes.</p>

<p>There are simply too many examples of FB abusing their power and I&rsquo;ve had enough.</p>

<ul>
<li><a href="https://techcrunch.com/2018/09/27/yes-facebook-is-using-your-2fa-phone-number-to-target-you-with-ads">Yes Facebook is using your 2FA phone number to target you with ads</a></li>
<li><a href="https://www.bloomberg.com/news/articles/2018-09-28/facebook-says-security-breach-affected-about-50-million-accounts">Facebook Says Breach Affected About 50 Million Accounts</a></li>
<li><a href="https://nypost.com/2018/10/01/facebook-hackers-got-access-to-tinder-spotify-instagram-and-more/amp/">Facebook hackers got access to Tinder, Spotify, Instagram and more</a></li>
<li><a href="https://www.msn.com/en-ca/news/canada/facebook-hit-with-class-action-lawsuit/ar-BBNOfEs?li=AAggNb9">Facebook hit with class action lawsuit</a></li>
<li><a href="https://www.cnbc.com/2018/03/21/facebook-cambridge-analytica-scandal-everything-you-need-to-know.html">Here&rsquo;s everything you need to know about the Cambridge Analytica scandal</a></li>
</ul>

<p>That&rsquo;s just a small sample of boundaries that have been crossed over the past few months!</p>

<p>My desire to leave the social media network giant has been festering for quite some time. It has been years since I actively enjoyed logging in to catch up with whatever I&rsquo;ve missed. Now whenever I sign in I scroll for a few seconds, roll my eyes, and log out.</p>

<p>I was having a conversation with a friend of mine over lunch about leaving the social network (he hasn&rsquo;t had an account in years), and one thing he said really struck a chord.</p>

<blockquote>
<p>No one ever says &ldquo;Hey, did you see that thing on Facebook?&rdquo;</p>
</blockquote>

<p>It&rsquo;s a phrase literally never uttered in my circle of friends.</p>

<p>Each time I log into the service it&rsquo;s just a slew of garbage. Misleading political memes, &ldquo;funny videos&rdquo;, and terribly biased news. It&rsquo;s garbage, I&rsquo;m tired of it, and I&rsquo;m leaving.</p>

<p>My wife also isn&rsquo;t a big user of the network. We&rsquo;ve recently become parents, and immediately shared the news, to each of our closest friends and family. We then felt <em>obligated</em> to post an announcement on FB. Neither of us <em>wanted</em> to do it. Why? We felt that sharing the news to FB was going to:</p>

<p>a) be just another signal lost in the noise
b) pervert the purity of the event by surrounding it with the garbage that is now Facebook content
c) minimize the emotional importance and personal excitement of our baby announcement</p>

<p>Am I worried about &ldquo;missing out&rdquo; on something? Not at all. My closest friends and I exchange messages about what&rsquo;s going on. Add to that the fact that when we get together we actually have something to talk about. Stories to share. It makes an evening out with friends that much more enjoyable. I&rsquo;d much rather sit down with friends as they personally recount their travelling adventures.</p>

<p>I realize that my small protest will make zero impact. Facebook will go on being Facebook and will continue making their revenue. The masses will continue to use Facebook because everyone else is doing it.</p>

<p>That&rsquo;s fine. But it&rsquo;s just not for me.</p>

<p>At this stage in my life, I&rsquo;ve learned to be a non-conformist.</p>

<p>/rant</p>

				]]>
			</description>
			<pubDate>Wed, 31 Oct 2018 14:20:23 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_deleting_my_facebook_account.html</guid>
		</item>
	

</channel>
</rss>