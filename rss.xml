<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd">
  <channel>
    <title>RyanNickel.com</title>
    <link>http://RyanNickel.com/</link>
    <description>Ryan Nickel's thought poops</description>
    
		<item>
			<title>Fall; Or, Dodge in Hell: A Promising Start That Got Lost in the Digital Abyss</title>
			<link>http://RyanNickel.com/html/fall_or_dodge_in_hell_a_promising_start_that_got_lost_in_the_digital_abyss.html</link>
			<description>
				<![CDATA[
					<p>So, I recently dove into Neal Stephenson&rsquo;s &ldquo;Fall; Or, Dodge in Hell,&rdquo; expecting an epic adventure. Well, let me tell you, it didn&rsquo;t quite deliver. Clocking in at a whopping 900 pages, you&rsquo;d think there&rsquo;d be enough room for some serious action. But nope, not much happens for the most part. I mean, we get bombarded with pages upon pages of philosophical musings, theological ramblings, and political banter. Some of it relates to the story, but a lot of it feels like it&rsquo;s just there to fill up space. It&rsquo;s like Stephenson took a philosophy/theology textbook and tried to disguise it as a novel.</p>

<p>The story? Yeah, it&rsquo;s in there somewhere, but good luck finding it. It keeps getting swallowed up by this jungle of words. And let me tell you, it&rsquo;s not even that great of a story. In fact, it could&rsquo;ve been told in a fraction of the pages. But no, we&rsquo;re treated to this never-ending maze of verbiage instead.</p>

<p>The writing itself is a bit odd, especially when we venture into the simulated &ldquo;souls&rdquo; in the virtual world. Those characters speak in this archaic, overdone high fantasy language that feels totally out of place. And get thisâ€”they draw inspiration from Norse, Greek, and Judeo-Christian mythology, which they just assume the reader to understand.. I mean, cool, but it&rsquo;s done in such an obvious and random way that it just doesn&rsquo;t make sense. The virtual world, which should be the heart of the book, ends up feeling forced and unconvincing. It&rsquo;s like, come on, give us something to believe in!</p>

<p>Towards the end, we spend almost all our time in the virtual world, and guess what? It turns into a typical, run-of-the-mill Quest fantasy with a weak and predictable ending. Talk about a letdown!</p>

<p>Overall, I hate to say it, but it feels like Stephenson wasn&rsquo;t giving it his all. It&rsquo;s like he was going through the motions, throwing together a mishmash of parts that don&rsquo;t fit well. It&rsquo;s a shame because we all know he can be a fantastic writer when he wants to be. Unfortunately, &ldquo;Fall; Or, Dodge in Hell&rdquo; isn&rsquo;t terrible, but it sure isn&rsquo;t a masterpiece either.</p>

<p>Individually the &ldquo;parts&rdquo; offered a very interesting premise which could have been a story unto themselves. The hoax&rsquo;s propogated by the internet and then believed in by certain demographics. The idea of <strong>Ameristan</strong>, the idea of &ldquo;souls&rdquo; living in a digital world. All very interesting, however I was very much left wanting.</p>

<p>Rating this one? Well, I&rsquo;d say it&rsquo;s a solid 2.5 out of 5 stars.</p>

				]]>
			</description>
			<pubDate>Wed, 31 May 2023 13:12:16 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/fall_or_dodge_in_hell_a_promising_start_that_got_lost_in_the_digital_abyss.html</guid>
		</item>
	
		<item>
			<title>Setting up my own @ryannickel.com domain for Mastadon</title>
			<link>http://RyanNickel.com/html/setting_up_my_own_@ryannickel.com_domain_for_mastadon.html</link>
			<description>
				<![CDATA[
					<p>If you&rsquo;re using Mastodon or other decentralized social networks, you might be looking for ways to improve your discoverability. One technique that&rsquo;s gained popularity is using the webfinger protocol to create a discoverable profile for your domain.</p>

<p><a href="https://www.hanselman.com">Scott Hanselman</a> wrote a <a href="https://www.hanselman.com/blog/use-your-own-user-domain-for-mastodon-discoverability-with-the-webfinger-protocol-without-hosting-a-server">blog post</a> about how to set this up, and it&rsquo;s a pretty easy process. Basically, you just need to create a webfinger file for your domain and add it to your site.</p>

<p>The webfinger file is a JSON object that contains information about you or your service, like your email address or URL. You can also include links to your social media profiles or a brief description of what you&rsquo;re all about.</p>

<p>In my case, I&rsquo;m running this site on GitHub Pages, and the tricky part is getting the webfinger file accessible from the well-known URL on your domain. By default, GitHub Pages doesn&rsquo;t serve up files or directories that start with a <code>.</code>. But fear not, my friend! You can use the <code>_config.yml</code> file to override this behavior and include the <code>.well-known</code> directory in your site.</p>

<p>All you need to do is add the following line to your <code>_config.yml</code> file:</p>

<p>(for a full list of overrides see <a href="https://jekyllrb.com/docs/configuration/options/">Jekylls Configuration Options</a> documentation)</p>

<pre><code>include: ['.well-known']
</code></pre>

<p>That tells Jekyll to include the <code>.well-known</code> directory in your site&rsquo;s output, which means your webfinger file should now be accessible at <a href="https://yourdomain.com/.well-known/webfinger">https://yourdomain.com/.well-known/webfinger</a>.</p>

<p>Once you&rsquo;ve got your webfinger file set up, Mastodon and other decentralized services should be able to discover information about you and your domain by performing a webfinger lookup. This can help others find and connect with you, which is always a good thing!</p>

<p>So there you have it, folks. Adding a webfinger file to your GitHub Pages site is an easy way to improve your discoverability on decentralized social networks. Follow the steps outlined above and start making some new connections today!</p>

				]]>
			</description>
			<pubDate>Tue, 18 Apr 2023 15:51:13 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/setting_up_my_own_@ryannickel.com_domain_for_mastadon.html</guid>
		</item>
	
		<item>
			<title>Updating to use H-Entry for each article</title>
			<link>http://RyanNickel.com/html/updating_to_use_h-entry_for_each_article.html</link>
			<description>
				<![CDATA[
					<p>As I delve deeper into the <a href="https://indieweb.org/">IndieWeb</a>, I first took on the low hanging fruit of adding the <a href="adding-h-ard-to-this-site.html">h-card</a> format to the footer.</p>

<p>With that low hanging fruit out of the way, I started looking into wrapping posts with the <a href="http://microformats.org/wiki/h-entry">h-entry</a> classes.</p>

<p>The purpose to the <strong>h-entry</strong> card, as put forth by the <a href="http://microformats.org/">microformats.io</a> site is:</p>

<blockquote>
<p>h-entry is a simple, open format for episodic or date-stamped content on the web. h-entry is often used with content intended to be syndicated, e.g. blog posts. h-entry is one of several open microformat standards suitable for embedding data in HTML.</p>
</blockquote>

<p>Starting to add this made me realize that my blog post entries weren&rsquo;t <em>strictly</em> accurate. I was using an <code>&lt;article&gt;</code> tag to contain the content of the blog post. The intended purpose as outlined in <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article">this mdn doc is</a>:</p>

<blockquote>
<p>The <code>&lt;article&gt;</code> HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication)</p>
</blockquote>

<p>My article wasn&rsquo;t truly <em>self contained</em>. The title portion of the article was instead in the <code>&lt;header&gt;</code> tag of this site. I needed to change up the markup and css for the site in order to make it adhere to the standards.</p>

<p>This led me down the rabbit hole of looking deeper into my markup.</p>

<p>What else wasn&rsquo;t quite idiomatic? Could I take this opportunity to clean up and minimize my HTML? Take this opportunity to perhaps learn a little more about the newer CSS properties available?</p>

<p>Why not!</p>

<h2>Index.tmpl Cleanup</h2>

<p>Looking at the index page, I thought I could clean it up a little bit. It was already fairly clean, but I could sense some <a href="https://csscreator.com/divitis">divitis</a> beginning to creep in.</p>

<pre><code>&lt;header&gt;
  &lt;div class=&quot;content&quot;&gt;
	  &lt;h1&gt;Hello, my name is &lt;span class=&quot;name&quot;&gt;Ryan Nickel&lt;/span&gt;&lt;/h1&gt;
	  &lt;p&gt;A personal blog focused on (primarily) software.&lt;/p&gt;
  &lt;/div&gt;
&lt;/header&gt;
</code></pre>

<p>That extra <code>&lt;div class=&quot;content&quot;&gt;...&lt;/div&gt;</code> was in there purely for styling the page. It added no semantic meaning to the markup. This is something that should be handled purely with CSS.</p>

<p>This was pretty simple to do, especially considering all I needed to do was set some padding, which is so much easier now with <code>vw</code>. I can use some simple media queries to make this responsive as well. Simple.</p>

<p>The <code>&lt;article&gt;</code> tag was suffering from the same thing. One extra <code>&lt;div&gt;</code> in order to control the styles. The same <code>vw</code> CSS class can address this as well.</p>

<p>Finally, looking at the <code>&lt;footer&gt;</code> tag, this one changed quite a bit.</p>

<p>Again it had the same <code>&lt;div&gt;</code> issue, so I was able to easily remove that.</p>

<p>I then took the opportunity to properly style the various social media links to be a proper <code>&lt;ul&gt;&lt;li&gt;...&lt;/li&gt;&lt;/ul&gt;</code>. I was lazy the first time around and just wrote them out in a <code>&lt;p&gt;</code> tag, and modifying them was proving to be more arduous than I would prefer. Again this can all easily be styled via CSS and allow the markup to be more semantic.</p>

<pre><code>footer ul {
  list-style-type: circle;
  display: flex;
  flex-direction: row;
  justify-content: center; 
  padding: 0;
}    

footer li {
  padding: 0px;
  margin-left: 20px;
}

footer li:first-child {
  list-style-type: none;
  margin-left: 0;
}
</code></pre>

<p>I was then able to modify the markup from</p>

<pre><code>&lt;p&gt;
  &lt;a rel=&quot;me&quot; href=&quot;https://twitter.com/rnickel&quot; class=&quot;url&quot;&gt;Twitter&lt;/a&gt; &amp;#x26AC; &lt;a rel=&quot;me&quot; href=&quot;https://github.com/mrnickel&quot; class=&quot;url&quot;&gt;GitHub&lt;/a&gt; &amp;#x26AC; &lt;a href=&quot;/about.html&quot;&gt;About&lt;/a&gt; &amp;#x26AC; &lt;a href=&quot;/rss.xml&quot;&gt;RSS&lt;/a&gt; &amp;#x26AC; &lt;a rel=&quot;me&quot; href=&quot;https://techhub.social/@mrnickel&quot;&gt;Mastodon&lt;/a&gt;
&lt;/p&gt;
</code></pre>

<p>to a much more readable</p>

<pre><code>&lt;ul&gt;
	&lt;li&gt;&lt;a rel=&quot;me&quot; href=&quot;https://twitter.com/rnickel&quot; class=&quot;u-url&quot;&gt;Twitter&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a rel=&quot;me&quot; href=&quot;https://github.com/mrnickel&quot; class=&quot;u-url&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/about.html&quot;&gt;About&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a rel=&quot;me&quot; href=&quot;https://indieweb.social/@mrnickel&quot; class=&quot;u-url&quot;&gt;Mastodon&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/rss.xml&quot;&gt;RSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;   
</code></pre>

<h2>Post.tmpl Cleanup</h2>

<p>This one was the more difficult template to clean up.</p>

<p>I want to ensure that the <code>&lt;article&gt;</code> tag was fully self-contained.</p>

<p>This means that my <code>&lt;header&gt;</code> tag needs to now be a child of the <code>&lt;article&gt;</code> tag.</p>

<p>To do this, I created a new <code>post.css</code> file that deviates somewhat from the <code>index.css</code> file. Although the overall styles are the same, the markup is different, which one could argue necessitates a new style sheet.</p>

<p>This allowed me to move the <code>&lt;header&gt;</code> tag within the <code>&lt;article&gt;</code> tag, thus fulfilling the requirement of having the <code>&lt;article&gt;</code> fully self contained. I was then able to move the actual copy of each article into <code>&lt;main&gt;</code> which one could also argue is more semantically correct, as it is the <em>main</em> content of the document.</p>

<p>Finally I was able to add the appropriate microformat classes for the associated items:
- <code>p-name</code> to highlight the name of the article (within the header)
- <code>e-content</code>  to capture the body of the article
- <code>dt-published</code> I could add to the <code>&lt;time&gt;</code> element to capture the date in which the article was published
- <code>u-url</code> to allow any scraper to grab the permalink</p>

<p>And that was it.</p>

<h2>Conclusion</h2>

<p>This was an interesting exercise for me. Getting into the nitty gritty of HTML and CSS isn&rsquo;t something I often do during my day-to-day. It was fun to jump into looking at the semantics and try to clean it up and toy around with CSS a little. I&rsquo;m sure there are better ways to go about doing what I did, but my goal wasn&rsquo;t to do it perfectly but instead to just play around. That&rsquo;s half the fun of having your own website.</p>

				]]>
			</description>
			<pubDate>Mon, 13 Mar 2023 06:49:16 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/updating_to_use_h-entry_for_each_article.html</guid>
		</item>
	
		<item>
			<title>On Removing Bootstrap Dependency</title>
			<link>http://RyanNickel.com/html/on_removing_bootstrap_dependency.html</link>
			<description>
				<![CDATA[
					<p>As part of my ongoing blog update, I&rsquo;m working on removing my dependency on <a href="https://getbootstrap.com">Bootstrap</a>.</p>

<p>As a caveat, I am by no means a CSS expert. I know enough to get into trouble, and I plan on using this as an effort to better understand CSS, in specific the flex properties (which I <em>always</em> forget).</p>

<p>As I was adding some <a href="adding_h-card_to_this_site,_and_scope_creep.html">innocuous changes</a>, it ended up breaking the layout of the site. This site was originally developed off of Bootstrap 3, and is (at the time of this writing) 2 major points behind the latest version.</p>

<p>While taking a quick peek at the upgrade path from Bootstrap 3 to 5, I decided it would be an interesting exercise to remove the dependency entirely.</p>

<p>The layout of the site is very basic and really doesn&rsquo;t need all of the overhead that Bootstrap brings long with it. I mean, how hard could it be?</p>

<p>In an effort to ensure consistent usability across all browsers, one should generally check browser compatability at <a href="https://caniuse.com">Can I Use</a> for various CSS properties.</p>

<p>The primary CSS properties I use to manage this site&rsquo;s layout are:
 - <a href="https://caniuse.com/?search=vh">vh</a>
 - <a href="https://caniuse.com/?search=vw">vw</a>
 - <a href="https://caniuse.com/?search=flex">flex</a>
 - <a href="https://caniuse.com/?search=%40media">@media</a></p>

<h2>VH - Vertical Height</h2>

<p>Used to ensure that the footer of the site is always aligned at the bottom regardless of the height of the content.</p>

<p>If the height of the content happens to be very short, I still desire the footer to be properly aligned on the bottom.</p>

<p>Previously I used some CSS hacks that relied on having some known static heights set for the body&rsquo;s <code>margin-bottom</code> and the footer classes <code>height</code> properties.</p>

<p>These had to be the same. This was the major reason for my layout breaking while trying to add some h-card properties.</p>

<h2>VW - Width</h2>

<p>Used to ensure that the content of the site only takes up a certain percentage of the browsers width.</p>

<h2>Flex</h2>

<p>Primarily used for layout out the elements in the footer.</p>

<h2>@Media</h2>

<p>Used for responsivenes. For something as simple as this blog I really have two formats: desktop and mobile.</p>

<h2>Discoveries</h2>

<p>When I started building this site I was using Bootstrap with many of my other projects and it was an easy way for me to get started. I was comfortable with using it, and could put the site together quickly in order to focus on writing (for all the writing I&rsquo;ve actually done).</p>

<p>Outside of the media property being supported way back since roughly 2010, all of the other properties listed above have been supported by the major browsers since roughly 2015. A full year before this blogs innogural <a href="hello_world.html">Hello World</a> post. As browsers become more and more powerful, and implement better tooling, it becomes so much easier to simply roll your own CSS.</p>

<h2>Typography</h2>

<p>One of the other benefits to Bootstrap is having some sane typography defaults. Having each of the h1, h2, p tags etc be an elegant ratio to one another was something I didn&rsquo;t have to think about before. I went searching around the web for something that could teach me a little more about making this and came across <a href="https://type-scale.com/">Type Scale</a>. A tool that would allow me to play with a few toggles to achieve a ratio I found to be pleasing. Perfect!</p>

<h2>Responsiveness</h2>

<p>The major reason for Bootstraps existance at the beggining was to make developers lives <em>much</em> easier for dealing with responsiveness. This was the advent of users beginning the switch from primarily surfing the web on their computers to consuming via mobile devices. Add to that the discrepancies of various browsers and you have a recipe for unmanageable spaghetti CSS. Bootstrap allowed developers to do away with this completely and just use their CSS and move on with developing the product.</p>

<p>This isn&rsquo;t the case anymore, and rolling your own media queries is much more manageable. If I were building a more complex application or working with a team I&rsquo;d still use something like Bootstrap or Tailwind in order to ensure easier onboarding and consistent language. Seeing as the goal with this update is to better understand CSS a bit more I&rsquo;ll see what I can do to implement this myself.</p>

<h3>Layout Updates</h3>

<p>My first naieve layout had a single CSS selection for all devices. The header would take up <code>68vw</code> of the viewport, and the content would take up <code>45vw</code>. This looked acceptable on desktop. Quickly fell apart on mobile.</p>

<p>A quick <code>@media</code> definition solved that by setting the headers width to <code>90vw</code> and the content to <code>80vw</code></p>

<p>The other item that quickly fell apart was the typography. Again it looked fine on desktop, but on mobile the header took up 90% of the visual height, not giving even a glimpse at the content.</p>

<p>I then used <a href="https://type-scale.com">Type Scale</a> to give me some sane defaults for smaller resolutions.</p>

<p>That was all that was required in this realm. Thankfully this is such a basic site and basic content.</p>

<h3>Keep My Name Always Together</h3>

<p>On various resolutions my name would be split across multiple lines. I wanted my name to always be on the same line regardless of the resolution. I wanted to control how and where the line break happened.</p>

<p>This one was as simple as adding <code>display: inline-block</code> to a <code>&lt;span&gt;</code> around <strong>Ryan Nickel</strong></p>

<h3>Footer</h3>

<p>The footer is the most complicated element in the site, which isn&rsquo;t really saying much as it&rsquo;s essentially a number of block elements aligned.</p>

<h2>Tools Used</h2>

<ul>
<li><a href="https://caniuse.com/">Can I Use</a></li>
<li><a href="https://type-scale.com/">Type Scale</a></li>
<li><a href="https://csstools.github.io/sanitize.css/">Sanitize.css</a></li>
<li><a href="https://validator.w3.org/">W3C Validator</a></li>
</ul>

<h2>Conclusion</h2>

<p>By removing the Bootstrap dependency I was able to greatly simplify the markup and CSS used. I was able to reduce the download size from 350kb to 177kb.</p>

<p>Would I recommend this route for everyone? If you&rsquo;re working on a passion project, then sure. However if you&rsquo;re working on a client product then absolutely not. Stick with something like Bootstrap or Tailwind.</p>

				]]>
			</description>
			<pubDate>Tue, 17 Jan 2023 20:14:23 EST</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_removing_bootstrap_dependency.html</guid>
		</item>
	
		<item>
			<title>Adding H-Card To This Site, and Scope Creep</title>
			<link>http://RyanNickel.com/html/adding_h-card_to_this_site,_and_scope_creep.html</link>
			<description>
				<![CDATA[
					<p>I was recently inspired by <a href="https://indieweb.social/@tbeseda">@tbeseda@indieweb.social</a> to add some <a href="http://microformats.org/wiki/h-card">h-card</a> formatting to my site.</p>

<p>The requirement was to simply add the appropriate classes to the footer of the site. Simple. But as so often happens with software, the scope crept.</p>

<h2>Creep 1: Research a New Proxy Service</h2>

<p>I needed to send the page through a parser, but do so without publishing it to the server.</p>

<p>In the past I had used <a href="https://ngrok.com/">ngrok</a>, however now it seems like it&rsquo;s clamped down and requires an account in order to run it. I don&rsquo;t have an ngrok account, and didn&rsquo;t really feel like signing up for yet another account. Not my cup-o-tea.</p>

<p>I then looked at <a href="https://github.com/localtunnel/localtunnel">localtunnel</a> which looked promising. A simple <code>npx</code> command to assign the running port and you&rsquo;re off to the races. However, this service has a confirmation page (with an ad to support their service) which requires a user to confirm when accessing. This won&rsquo;t work for a scraper such as <a href="https://microformats.io/">https://microformats.io/</a>.</p>

<p>I then found <a href="https://localhost.run/">localhost.run</a> to serve up the site running on my local machine, then parsed it through <a href="https://microformats.io/">https://microformats.io/</a>, which leverages the existing SSH tools already found on my machine. This was <em>exactly</em> what I was looking for. Brilliant usage of SSH to provide me what I was looking for.</p>

<h2>Creep 2: Update The SataticSiteGenerator to Rebuild All Pages</h2>

<p>This was when I realized a deficiency in my <a href="https://github.com/mrnickel/StaticSiteGenerator">StaticSiteGenerator</a>: The inability to regenerate each page with the updated template.</p>

<p>This was a fun little exercise in revisiting some of my older code. The last git commit for this project was on Oct 31, 2018. Four years of dust sitting on this particular codebase. And four years since I&rsquo;ve even looked at any Go code.</p>

<p>I could have left the older statically generated HTML pages as the older format. A way to see how the site progresses over the years, however I can&rsquo;t stomach inconsistencies, so I needed to write the appropriate procedure to clean everything up. Besides, that&rsquo;s what git is all about right? Preserving histories.</p>

<h2>Creep 3: Remove Bootstrap 3 Dependency</h2>

<p>When adding the bio photo to the footer, it threw off the styles of the site and required fixing css.</p>

<p>It&rsquo;s currently 2 full point versions behind the Bootstrap framework, which would likely mean almost an entire re-write anyway. So I&rsquo;m going to take the opportunity to make the site even lighter and use simple CSS. It&rsquo;s a simple site anyway. No sense in adding extra load to download CSS that I only use 1% of. (post on this to forthcoming)</p>

<h2>Creep 4: Add More Microformats</h2>

<p>Further inspired by <a href="https://indieweb.org/">The IndieWeb</a>, there are a few more simple microformats that fit in nicely. Namely <a href="http://microformats.org/wiki/h-feed">h-feed</a>, and <a href="http://microformats.org/wiki/h-entry">h-entry</a>.</p>

<h2>Conclusion</h2>

<p>It always seems to happen that a seeming innocuous change snowballs into more and more feature requests. In this case the desire to simply add a basic h-card implementation to the footer turned into updating a dependency, updating some deprecated dependencies (in this case removing the dependency entirely)</p>

<p>It&rsquo;s always interesting to see how software takes on a life of it&rsquo;s own as it&rsquo;s used more and more.</p>

				]]>
			</description>
			<pubDate>Mon, 16 Jan 2023 21:34:45 EST</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/adding_h-card_to_this_site,_and_scope_creep.html</guid>
		</item>
	
		<item>
			<title>Creating Homebrew Package For StaticSiteGenerator Distribution</title>
			<link>http://RyanNickel.com/html/creating_homebrew_package_for_staticsitegenerator_distribution.html</link>
			<description>
				<![CDATA[
					<p>In a previous post playing with <a href="./on_adding_github_actions_to_my_staticsitegenerator.html">GitHub Actions</a> I thought it might be interseting to figure out how to distribute the binary via Homebrew.</p>

<p>While reading through the <a href="https://docs.brew.sh/Acceptable-Formulae">Acceptable Formulae</a> documentation, my dreams of being accepted into the Homebrew-core packages were dashed. (end sarcasm)</p>

<p>The primary rule that would be broken by this software are:</p>

<blockquote>
<h2>Niche (or self-submitted) stuff</h2>
</blockquote>

<p>Namely:</p>

<blockquote>
<p>be maintained (i.e. the last release wasnâ€™t ages ago, it works without patching on all Homebrew-supported OS versions and has no outstanding, unpatched security vulnerabilities)</p>
</blockquote>

<p>The software <em>has</em> had an update in the past few weeks (at time of this writing), however previous to that was 4 years ago. Not exactly actively maintained.</p>

<blockquote>
<p>be known</p>
</blockquote>

<p>Nobody knows this software exists except for myself</p>

<blockquote>
<p>be used</p>
</blockquote>

<p>As far as I know, I&rsquo;m the only user of it</p>

<blockquote>
<p>have a homepage</p>
</blockquote>

<p>&hellip; not yet, however perhaps a quick github self hosted page that&rsquo;s essentially the readme file.</p>

<p>The next question to answer is how can I self host this formula? Seeing as I highly doubt Homebrew would accept my PR (and for good reason. Please continue your processes).</p>

<p>In Homebrew parlance, what I want to create is a <a href="https://docs.brew.sh/Taps">tap</a>. By default this relies on GitHub, which is perfect for this series of events.</p>

<p>I&rsquo;m going to partially re-hash the official Homebrew documentation here for my own convenience:</p>

<ol>
<li>Create a github repo <strong>/mrnickel/homebrew-mrnickel</strong>
This is the convention that Homebrew uses in order to tap properly.</li>
<li>Create the <strong>Go</strong> formula using:
 <code>brew create https://github.com/mrnickel/StaticSiteGenerator/archive/refs/tags/{RELEASE_VERSION_HERE}.tar.gz --go</code>
This will create a formula definition file that will be committed to the <strong>mrnickel/homebrew-mrnickel</strong> repo.</li>
<li>Edit the information as appropriate in the definition. Setting the <strong>desc, homepage, url</strong></li>
<li>Copy the file from <code>$(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula</code> directory,  to the <strong>homebrew-mrnickel</strong> git directory.</li>
<li>Commit and push to the <strong>mrnickel/homebrew-mrnickel</strong> repository</li>
<li>Run <code>brew tap mrnickel/mrnickel</code></li>
<li>Run <code>brew install StaticSiteGenerator</code></li>
</ol>

<h2>Conclusion</h2>

<p>After some trial and error I came up with a suitable <a href="https://github.com/mrnickel/homebrew-mrnickel/blob/main/staticsitegenerator.rb">homebrew formula</a>.</p>

<p>I&rsquo;ve used Homebrew for many many years now. I&rsquo;ve never fully understood how it works, just that it works. It was interesting to dive into it a bit deeper. They&rsquo;ve done an excellent job with their documentation, and it&rsquo;s a well thought out package manager. I suppose that&rsquo;s why it&rsquo;s essentially the default package manager for MacOS.</p>

<p>I spent far too much time googling for ways to create the formula file, and I should have instead have just relied on the <code>brew help</code> and <code>brew create help</code> documentation as it&rsquo;s well represented. If only more software took as much pride in their docs as Homebrew does.</p>

<p>One thing I wish they would add would be a way to specify the path of the generated .rb file.</p>

<p>Now that I&rsquo;ve set up this homebrew tap, I can add this to some machine provisioning scripts I&rsquo;ve been meaning to write. Perhaps an article for another day. That along with some dotfiles that I should persist.</p>

				]]>
			</description>
			<pubDate>Fri, 13 Jan 2023 12:19:42 EST</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/creating_homebrew_package_for_staticsitegenerator_distribution.html</guid>
		</item>
	
		<item>
			<title>On Adding GZip Compression To StaticSiteGenerator</title>
			<link>http://RyanNickel.com/html/on_adding_gzip_compression_to_staticsitegenerator.html</link>
			<description>
				<![CDATA[
					<p>In an attempt to be a Good Web Citizen, I thought I&rsquo;d try to add some GZip compression to the responses served up by the <a href="https://github.com/mrnickel/StaticSiteGenerator">StaticSiteGenerator</a>.</p>

<p>What kind of performance increases will I get from this? Likely very little as my site is incredibly basic.</p>

<p>Who&rsquo;s asking for this update? Absolutely no one.</p>

<p>Why am I doing it? Curiosity.</p>

<h2>Question 1: Performance Increase?</h2>

<p>I&rsquo;m assuming there will be little to none. The site is essentially 99% text based. The other 1% would be the few images served up.</p>

<ul>
<li>Non GZipped: 169kb transfered</li>
<li>GZipped: 54.8kb transferred</li>
</ul>

<p>Roughly a third less transferred to the client. I guess my assumption above was incorrect!</p>

<h2>Question 2: How Complicated Would This Be?</h2>

<p>Go is a very well thought out language purpose built for creating web applications. My assumption here is that it would be very straight forward.</p>

<p>As I&rsquo;m by no means an effective Go programmer, and my experience is very limited with the language, I did what any developer would do: Google it.</p>

<p>I found a few examples that relied on 3rd party packages to solve the problem, but as I always try to limit my reliance on others packages, I continued until I found something that relied solely on the <a href="https://pkg.go.dev/std">Go stdlib</a>. I found <a href="https://gist.github.com/bryfry/09a650eb8aac0fb76c24">this example</a> by <a href="https://github.com/bryfry">bryfry</a>, plugged it in and it worked instantly.</p>

<h1>Conclusion</h1>

<p>This was a fun little experiment. It was refreshing to dip my toes back into Go again, and dust off the knowledge a bit.</p>

<p>Go&rsquo;s middleware design pattern is incredibly effective allowing for an elegant plug-n-play solution.</p>

<p>I was suitably impressed with the performance gains of adding just a few lines of code. A third of the file size is enough to ensure that I definitely use this on all my other projects.</p>

<p>I also always find it satisfying to work towards being a Good Web Citizen. No sense in adding more unnecessary bandwidth to the internet.</p>

				]]>
			</description>
			<pubDate>Wed, 04 Jan 2023 10:42:53 EST</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_adding_gzip_compression_to_staticsitegenerator.html</guid>
		</item>
	
		<item>
			<title>On Adding GitHub Actions To My StaticSiteGenerator</title>
			<link>http://RyanNickel.com/html/on_adding_github_actions_to_my_staticsitegenerator.html</link>
			<description>
				<![CDATA[
					<p>A number of years ago I started toying with <a href="https://go.dev">Go</a>. At the same time I was building this website you&rsquo;re reading right now. I wanted to join these two desires, so I thought I&rsquo;d take advantage of the, new to me, static site hosting of github for my personal website.</p>

<p>I love learning new programming languages. I find that even if I don&rsquo;t use them in my day-to-day there&rsquo;s always a new paradigm that can be applied to whatever language I use as my daily driver.</p>

<p>My big takeaway from Go was to <em>always</em> handle your errors, and to <em>always</em> make your errors explicit. Handling errors appropriately is a difficult thing to do. Do you retry? How many times? Does it make sense to simply retry? In what context do you retry? Do you simply bubble the error up to the user and have them address the errors? How many different kinds of errors can be returned? Errors and edge cases are the Hard Part of programming, and handling these appropriately separates a Good Developer from a Bad Developer.</p>

<p>As an aside, when working with clients, I spend an inordinate amount of time trying to highlight and solution all of the possible edge cases. Somtimes they&rsquo;re edge cases that are incredibly unlikely to happen, however it&rsquo;s always good to highlight everything that could pontentially go wrong and how to deal with said issues.</p>

<p>I build the <a href="https://github.com/mrnickel/StaticSiteGenerator">StaticSiteGenerator</a> as a way to play with Go, and to also tie that in with my attempt to statically host a site on <a href="https://pages.github.com/">GitHub Pages</a>.</p>

<p>I maintain enough servers daily, so the idea of maintaining another one for my personal site didn&rsquo;t appeal to me. Also, static site generators were all the rage, so why not jump on that band wagon?</p>

<p>Anyway, I built the <a href="https://github.com/mrnickel/StaticSiteGenerator">StaticSiteGenerator</a>, which has been meeting my needs. The application has been running for me just fine, and my last commit was in 2018. If it ain&rsquo;t broke don&rsquo;t fix it.</p>

<p>More recently I thought to myself, why not set up some CI/CD to automatically publish this software as a release to GitHub so I can easily pull it down to any of my machines to author a new post. No longer will I have to download the github repo, build it locally and set up aliases in my <code>.zprofile</code>. I can simply install the Go module and be on my way.</p>

<p>I originally thought all I&rsquo;d have to do is create a github workflow to build and release it, however this is when I discovered that my app was a little outdated. Go had moved on from where I was. I had to quickly sort out their new module interfaces.</p>

<p>Thankfully it wasn&rsquo;t too arduous.</p>

<p>Previously I&rsquo;d simply <code>go build</code> and take the generated binary and be off to the races.</p>

<p>Now it seems that go has these <em>modules</em>, which is Go&rsquo;s new way of managing Dependencies.</p>

<p>I added the <code>go.mod</code> file which is sort of like <code>npm</code>&rsquo;s <code>package.json</code> file. Outlining all 3rd party dependencies, and I was back to building again.</p>

<h2>Publish Binary To GitHub Release</h2>

<p>Setting up the GitHub Action to publish the SimpleSiteGenerator was pretty straight forwrd.</p>

<ol>
<li>Add a <code>build.yml</code> file to the <code>.github/workflows</code> directory</li>
</ol>

<h2>Build.yml</h2>

<pre><code>name: Go

on:
  push:
    branches:
      - &quot;!*&quot;
    tags:
      - &quot;v*.*.*&quot;

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v4
      with:
        args: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
</code></pre>

<p>Fairly minimal. Whenever a tag is created in the format of <strong>vX.X.X</strong> the action will kick off, build the binary and upload it as a release.</p>

<p>Alright, now that we have a package that we can <code>go install</code>, I can get to running things locally.</p>

<h2>Install StaticSiteGenerator Locally</h2>

<p>I want to do this in order to ensure that it will work remotely.</p>

<p><code>go install github.com/mrnickel/StaticSiteGenerator@latest</code>
<code>echo alias ssg='StaticSiteGenerator &gt;&gt; ~/.zprofile</code>
<code>ssg</code></p>

<p>This should now print out the actions of the StaticSiteGenerator.</p>

<h1>Conclusion</h1>

<p>Lately I&rsquo;ve been working primarily with TypeScript/JavaScript. Jumping back into Go is a nice breath of fresh air. It&rsquo;s so lightweight, doesn&rsquo;t require all sorts of build systems and bundlers. It <strong>just works</strong>.</p>

<p>Next up I think I&rsquo;ll look into adding this as a <a href="https://brew.sh/">HomeBrew</a> package.</p>

				]]>
			</description>
			<pubDate>Mon, 02 Jan 2023 20:26:18 EST</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_adding_github_actions_to_my_staticsitegenerator.html</guid>
		</item>
	
		<item>
			<title>On Open Source Trolls</title>
			<link>http://RyanNickel.com/html/on_open_source_trolls.html</link>
			<description>
				<![CDATA[
					<p>We all use open source projects to complete our daily jobs. We all stand on the shoulders of giants. However it seems as though there are many who take the hard work of others for granted. They&rsquo;ve come to expect enterprise level support and stability from projects that are given away for free from generous people.</p>

<p>Since I&rsquo;ve started developing with React Native/JS, I&rsquo;ve begun to actually contribute back to some of the projects that I use. Not nearly enough, but something is better than nothing.</p>

<p>As my involvement in the community has increased, so too has my empathy towards those who manage these heavily used projects.</p>

<p>I understand why people may feel frustrated when updates to their dependencies introduce regressions, but why this sense of entitlement? These regressions are never intentional, and breaking changes are generally well communicated especially with large projects such as ReactJS / ReactNative.</p>

<p>There will always be edge cases that the team simply can&rsquo;t account for. ReactJS in general is downloaded millions of times each week. The distribution is so large that introducing bugs is inevitable.</p>

<p>Bug reports are incredibly valuable, but comments such as:</p>

<blockquote>
<p>Yeah &hellip; RN is so instable &hellip; RN dev spend more time fixing bugs than properly coding</p>
</blockquote>

<p>or</p>

<blockquote>
<p>I hate React Native now. The basic functionality is not working what the worst team, don&rsquo;t you know test before release?</p>
</blockquote>

<p>This type of response/comment is not helpful to anyone. Instead, letâ€™s try to positively articulate our experience when we issue bug fixes and circumvent negative comments. Letâ€™s not forget that there is a person on the receiving end of these harsh comments.</p>

<p>We need to focus on the issue at hand, offer helpful suggestions to the best of our ability, and if possible offer a code repo / sandbox that duplicates the issue. These are solutions that will benefit others who have the curiosity to learn.</p>

<p>See this post on on <a href="https://www.softwaretestinghelp.com/how-to-write-good-bug-report/">how to write helpful bug reports</a></p>

<p>Here are a few items that I believe are of utmost significance:</p>

<blockquote>
<p><strong>Donâ€™t assume</strong> that the developer has made a mistake and hence you can use harsh words. Before reporting, it is equally important to check if the same bug has been reported or not.</p>
</blockquote>

<p>and</p>

<blockquote>
<p><strong>A duplicate bug</strong> is a burden in the testing cycle. Check the whole list of known bugs. At times, the developers might have known the issue and ignored it for a future release. Tools like Bugzilla which automatically searches for duplicate bugs can also be used. However, it is best to manually search for any duplicate bug.</p>
</blockquote>

<p>In the current world we live in, we need to recognize the developers that are  giving away their work to help you improve  so let&rsquo;s pay it forward and show them the respect and appreciation warranted.</p>

				]]>
			</description>
			<pubDate>Wed, 22 Apr 2020 20:11:52 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_open_source_trolls.html</guid>
		</item>
	
		<item>
			<title>On Getting AWS Solutions Architect Certified</title>
			<link>http://RyanNickel.com/html/on_getting_aws_solutions_architect_certified.html</link>
			<description>
				<![CDATA[
					<p>Having accomplished my personal challenge of completing an olympic triathlon (while simultaneously rediscovering my love of cycling), I decided to tackle a professional challenge.</p>

<p>So I went in search of something new.</p>

<p>At the time, my team was  knee-deep in a lift and shift of our platform from MediaTemple to AWS. The process was going very smoothly and I found myself  intrigued by the number of overwhelming-yet-fascinating services they offer.</p>

<p>An abundance of shiny new tools to  take our platform to the next level. I was hooked!  The search was over.  My professional challenge was to get my Solutions Architect Certification on AWS.</p>

<h2>THE PREPARATION</h2>

<h3>Online Course</h3>

<p>Just like anything new, I had to do my research and gather learning resources.</p>

<p>Amazon offered a number of white papers on the subject, but I found them to be too dry for my liking. I generally prefer to get my hands dirty and at least see some live examples.</p>

<p>This led me to Pluralsightâ€™s <a href="https://www.pluralsight.com/courses/aws-certified-solutions-architect-associate">AWS Certified Solutions Architect - Associate</a> course by <a href="https://twitter.com/ekhnaser">Elias Khnaser</a>. Other than the disappointment of marginally dated content, it was an overall solid course that allowed me to wrap my head around the networking and IAM concepts to help me improve the overall security of our platform.</p>

<h3>Linux Academy</h3>

<p>I also played around with <a href="https://linuxacademy.com/">Linux Academy</a> as I was captivated  by the prospect of working through exercises on a live AWS account and having my solution verified. However, at the time the platform was quite new and the results were inconsistent and quite often incorrect.</p>

<p>I wish I could recall more details as to what my issues were but this was a long time ago and I&rsquo;m certain the platform has gotten much better. I&rsquo;d be curious to try it again when I decide to get another certification.</p>

<h3>Study Guide</h3>

<p>The final piece of learning material I picked up was the official <a href="https://www.amazon.ca/Certified-Solutions-Architect-Study-Guide/dp/111950421X/ref=sr_1_1?keywords=solutions+architect+study+guide&amp;qid=1580314684&amp;sr=8-1">AWS Certified Solutions Architect Study Guide</a>. It should come as no surprise that this book covered everything that one would be tested on. It was  valuable at presenting the various concepts and topics and offered some  fundamental study materials.</p>

<h3>Practical Application</h3>

<p>Now that I had the learning materials, I wanted to apply best practices and gain practical experience before I wrote the exam.</p>

<p>Some of the goals I wanted to achieve with this were:</p>

<ul>
<li>Secure networking</li>
<li>Secure IAM roles and security groups</li>
<li>Autoscaling</li>
<li>Reduce costs</li>
</ul>

<p>As I don&rsquo;t have a background in networking, that was the part I struggled with the most (Well&hellip; that and IAM). At the beginning I was excited just to get things up and running so my security groups weren&rsquo;t exactly up to snuff. Open to too many services and external network attacks. RDS was the biggest culprit for this as I was used to opening up my SQL app and connecting directly to it in order to debug any issues. I had contemplated setting up a VPN but considering one of my goals was to reduce costs I settled on locking down requests to my own IP address. As our platform was quite stable this was acceptable. If I or my team were connecting regularly I would have set up the VPN.</p>

<p>Setting up proper networking was a hurdle for me. As the <a href="https://Volu.me">Volu.me</a> back end grew organically into a monolith, networking was never a thing I had to think about. It&rsquo;s easy to build and deploy a single codebase to a single server when everything is synchronous and request based. However as soon as your platform needs to scale you need to start thinking about being more reactive and asynchronous. This means at the very least running on difference processes, which quickly leads to overburdening a single machine. In the short term this can be mitigated by increasing the size of your EC2 instance, but this is obviously not sustainable. Best practice dictates to use multiple smaller EC2 instances which means putting more thought into networking. My goal was to only have two services publically available: S3 and our ELB. Our system was essentially a monolith with a number of cron jobs running as services so networking was pretty straight forward. I could go into more technical detail about our solution, but that would be better left to another blog post.</p>

<p>My next hurdle was properly setting up IAM across our system. Again, because our system was essentially a monolith that was now distributed it gave me a good opportunity to ideally have services split up. I created the appropriate IAM accounts with the ideal microservice setup that we were aiming for and after some stressful afternoons we got everything running.</p>

<h2>THE DEEP BREATH</h2>

<p>Now that I had some practical experience setting up a non-trivial system on AWS following best practice I had one last hurdle to jump: My negative internal dialog constantly telling me that I wasn&rsquo;t ready.</p>

<p>I hadn&rsquo;t written any tests in 10+ years! How would I know if I&rsquo;ve prepared enough? How do I know if I&rsquo;m really ready? I spent far too much time procrastinating by convincing myself that I wasn&rsquo;t prepared.</p>

<p>After months of putting it off I dug my heels in, logged into the portal and booked a date.  There was no turning back. I told myself that I wasn&rsquo;t going to reschedule no matter what. I then did what I always do just before tests and crammed the entire week prior. Ran through all of the practice exams, exercises and anything else I could find.</p>

<p>The night before the exam, I couldnâ€™t focus on anything else.  My palms were sweaty, knees weak, arms were heavyâ€¦</p>

<h2>THE EXAM</h2>

<p>The day of the exam came and that familiar fluttering feeling in my stomach returned.</p>

<p>I went through the test and I realized that as per usual I had over-prepared. In retrospect If it wasnâ€™t for my fear,  I could have written the test months earlier.</p>

<p>To my relief, I passed the test and was very thankful that I got the results instantly.</p>

<h2>THE CONCLUSION</h2>

<p>Although the <a href="https://Volu.me">Volu.me</a> (my company) platform has since been taken down, I am still an avid user of AWS and always recommend it to clients.</p>

<p>I am concerned about vendor lockin, and to some extent it is unavoidable, but it can be mitigated with some effort&hellip; but again that is another blog post for another day.</p>

<p>There it is; I tackled my professional challenge. I think my next personal (physical) challenge this year will either be learning to fly-fish, or run a full marathon Maybe both!</p>

				]]>
			</description>
			<pubDate>Wed, 25 Mar 2020 16:06:17 EDT</pubDate>
			<guid isPermaLink="false">http://RyanNickel.com/html/on_getting_aws_solutions_architect_certified.html</guid>
		</item>
	

</channel>
</rss>